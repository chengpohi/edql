// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _EDQLLexer.flex

package com.github.chengpohi.edql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.chengpohi.edql.parser.psi.EDQLTypes.*;


public class _EDQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\6\23\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\10\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\2\44\1\63\1\64\1\65\1\0\1\66"+
    "\1\0\1\67\1\44\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\44\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\44\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\44\1\113\1\114\1\115\1\0\1\116\7\0\1\1"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\1\21\23\1\24\1\25\10\23"+
    "\1\26\1\27\2\3\1\0\1\4\2\6\1\30\2\0"+
    "\1\17\1\23\1\31\21\23\1\32\31\23\1\33\5\23"+
    "\1\3\1\34\1\0\4\17\1\35\4\23\1\36\7\23"+
    "\1\37\10\23\1\17\2\23\1\40\14\23\1\41\7\23"+
    "\1\42\2\0\1\17\1\0\11\23\1\43\3\23\1\44"+
    "\1\45\3\23\1\46\2\23\1\47\1\23\1\50\1\23"+
    "\1\51\13\23\1\52\1\53\1\23\1\54\2\0\1\17"+
    "\5\23\1\55\3\23\1\56\10\23\1\57\1\60\5\23"+
    "\1\61\1\62\1\23\1\0\3\23\1\34\1\0\1\63"+
    "\4\23\1\64\1\65\1\66\20\23\1\67\1\70\1\71"+
    "\1\0\15\23\1\72\2\23\1\73\2\23\1\74\1\23"+
    "\1\0\1\23\1\75\16\23\1\76\1\23\1\77\1\23"+
    "\1\100\1\17\1\101\15\23\1\102\1\103\5\23\1\104"+
    "\1\105\7\23\1\106\10\23\1\107\1\110\2\23\1\111"+
    "\3\23\1\112\2\23\1\113\2\23\1\114\4\23\1\115"+
    "\1\23\1\116\4\23\1\117\3\23\1\120\33\23\1\121"+
    "\12\23\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\117\0\u018b\0\117"+
    "\0\117\0\117\0\117\0\117\0\u01da\0\117\0\117\0\u0229"+
    "\0\u0278\0\117\0\117\0\117\0\u02c7\0\u0316\0\u0365\0\u03b4"+
    "\0\u0403\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c"+
    "\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\117\0\117"+
    "\0\u0855\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e"+
    "\0\117\0\117\0\u0acd\0\u0b1c\0\u0b6b\0\117\0\117\0\u0bba"+
    "\0\117\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3"+
    "\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u105b"+
    "\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235\0\u1284\0\u04a1"+
    "\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc"+
    "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774"+
    "\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec"+
    "\0\u1a3b\0\u04a1\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\117"+
    "\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u04a1\0\u1def"+
    "\0\u1e3e\0\u1e8d\0\u1edc\0\u04a1\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018"+
    "\0\u2067\0\u20b6\0\u2105\0\u04a1\0\u2154\0\u21a3\0\u21f2\0\u2241"+
    "\0\u2290\0\u22df\0\u232e\0\u237d\0\u04a1\0\u23cc\0\u241b\0\u04a1"+
    "\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693"+
    "\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u04a1\0\u281e\0\u286d\0\u28bc"+
    "\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u04a1\0\u2a47\0\u2a96\0\u2ae5"+
    "\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d"+
    "\0\u2dac\0\u2dfb\0\u04a1\0\u2e4a\0\u2e99\0\u2ee8\0\u04a1\0\u04a1"+
    "\0\u2f37\0\u2f86\0\u2fd5\0\u04a1\0\u3024\0\u3073\0\u04a1\0\u30c2"+
    "\0\u04a1\0\u3111\0\u04a1\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c"+
    "\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476\0\u04a1\0\u04a1"+
    "\0\u34c5\0\u04a1\0\u3514\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f"+
    "\0\u36ee\0\u373d\0\u04a1\0\u378c\0\u37db\0\u382a\0\u04a1\0\u3879"+
    "\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u04a1"+
    "\0\u04a1\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u04a1\0\u04a1"+
    "\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\117\0\u3e07\0\u04a1"+
    "\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u04a1\0\u04a1\0\u04a1\0\u3f92"+
    "\0\u3fe1\0\u4030\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a"+
    "\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482"+
    "\0\u04a1\0\u04a1\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c"+
    "\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7\0\u4836\0\u4885\0\u48d4"+
    "\0\u04a1\0\u4923\0\u4972\0\u04a1\0\u49c1\0\u4a10\0\u04a1\0\u4a5f"+
    "\0\u4aae\0\u4afd\0\u04a1\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u4c88"+
    "\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00"+
    "\0\u4f4f\0\u04a1\0\u4f9e\0\u04a1\0\u4fed\0\u04a1\0\117\0\u04a1"+
    "\0\u503c\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265"+
    "\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u04a1\0\u04a1\0\u543f"+
    "\0\u548e\0\u54dd\0\u552c\0\u557b\0\u04a1\0\u04a1\0\u55ca\0\u5619"+
    "\0\u5668\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u04a1\0\u57f3\0\u5842"+
    "\0\u5891\0\u58e0\0\u592f\0\u597e\0\u59cd\0\u5a1c\0\u04a1\0\u04a1"+
    "\0\u5a6b\0\u5aba\0\u04a1\0\u5b09\0\u5b58\0\u5ba7\0\u04a1\0\u5bf6"+
    "\0\u5c45\0\u04a1\0\u5c94\0\u5ce3\0\u04a1\0\u5d32\0\u5d81\0\u5dd0"+
    "\0\u5e1f\0\u04a1\0\u5e6e\0\u04a1\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa"+
    "\0\u04a1\0\u5ff9\0\u6048\0\u6097\0\u04a1\0\u60e6\0\u6135\0\u6184"+
    "\0\u61d3\0\u6222\0\u6271\0\u62c0\0\u630f\0\u635e\0\u63ad\0\u63fc"+
    "\0\u644b\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674"+
    "\0\u66c3\0\u6712\0\u6761\0\u67b0\0\u67ff\0\u684e\0\u689d\0\u68ec"+
    "\0\u04a1\0\u693b\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u6b15"+
    "\0\u6b64\0\u6bb3\0\u6c02\0\u04a1\0\u04a1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\3\21\1\22\1\23\1\24\1\2\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\33"+
    "\1\37\1\40\1\33\1\41\1\33\1\42\2\33\1\43"+
    "\1\44\1\45\1\46\2\33\1\47\1\2\1\50\2\33"+
    "\1\51\2\33\1\52\1\33\1\53\1\54\3\33\1\55"+
    "\2\33\1\56\1\33\1\57\1\33\1\60\3\33\1\61"+
    "\1\62\120\0\3\3\113\0\4\63\1\64\57\63\1\65"+
    "\32\63\2\5\1\66\114\5\11\7\1\67\52\7\1\70"+
    "\32\7\31\0\1\71\11\0\1\72\73\0\1\73\1\0"+
    "\4\33\5\0\4\33\1\74\23\33\3\0\1\75\3\33"+
    "\1\74\22\33\22\0\1\73\1\0\4\21\5\0\4\33"+
    "\1\74\23\33\3\0\1\75\3\33\1\74\22\33\11\0"+
    "\1\76\11\0\1\76\11\0\30\76\3\0\27\76\24\0"+
    "\4\33\5\0\15\33\1\77\4\33\1\100\3\33\1\101"+
    "\1\33\3\0\16\33\1\102\3\33\1\103\4\33\24\0"+
    "\4\33\5\0\1\104\27\33\3\0\27\33\24\0\4\33"+
    "\5\0\1\105\15\33\1\106\11\33\3\0\27\33\24\0"+
    "\4\33\5\0\4\33\1\107\11\33\1\110\11\33\3\0"+
    "\27\33\24\0\4\33\5\0\13\33\1\111\5\33\1\112"+
    "\5\33\1\113\3\0\27\33\24\0\4\33\5\0\30\33"+
    "\3\0\27\33\24\0\4\33\5\0\4\33\1\114\14\33"+
    "\1\115\6\33\3\0\27\33\24\0\4\33\5\0\4\33"+
    "\1\116\11\33\1\117\11\33\3\0\27\33\24\0\4\33"+
    "\5\0\5\33\1\120\22\33\3\0\14\33\1\121\12\33"+
    "\24\0\4\33\5\0\10\33\1\122\17\33\3\0\27\33"+
    "\24\0\4\33\5\0\4\33\1\123\11\33\1\124\11\33"+
    "\3\0\27\33\24\0\4\33\5\0\16\33\1\125\11\33"+
    "\3\0\1\33\1\126\25\33\24\0\4\33\5\0\4\33"+
    "\1\127\11\33\1\130\5\33\1\131\3\33\3\0\1\33"+
    "\1\132\25\33\24\0\4\33\5\0\4\33\1\133\17\33"+
    "\1\134\3\33\3\0\27\33\24\0\4\33\5\0\7\33"+
    "\1\135\1\136\10\33\1\137\6\33\3\0\10\33\1\140"+
    "\16\33\24\0\4\33\5\0\30\33\3\0\20\33\1\141"+
    "\6\33\24\0\4\33\5\0\4\33\1\142\23\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\12\33\1\143"+
    "\2\33\1\144\11\33\24\0\4\33\5\0\30\33\3\0"+
    "\1\33\1\145\13\33\1\146\4\33\1\147\4\33\24\0"+
    "\4\33\5\0\30\33\3\0\21\33\1\150\5\33\24\0"+
    "\4\33\5\0\30\33\3\0\13\33\1\151\1\152\12\33"+
    "\24\0\4\33\5\0\30\33\3\0\15\33\1\153\4\33"+
    "\1\154\4\33\24\0\4\33\5\0\30\33\3\0\4\33"+
    "\1\155\22\33\24\0\4\33\5\0\30\33\3\0\17\33"+
    "\1\156\7\33\24\0\4\33\5\0\30\33\3\0\1\33"+
    "\1\157\25\33\2\0\4\63\1\160\57\63\1\65\32\63"+
    "\4\0\1\161\112\0\2\63\2\0\113\63\64\7\1\70"+
    "\32\7\102\0\1\162\36\0\4\163\106\0\1\164\1\0"+
    "\1\164\2\0\4\165\5\0\30\33\3\0\27\33\24\0"+
    "\4\166\5\0\30\33\3\0\27\33\11\0\2\76\3\0"+
    "\1\76\1\0\11\76\1\0\1\76\2\0\30\76\1\0"+
    "\1\76\1\0\27\76\24\0\4\33\5\0\3\33\1\167"+
    "\24\33\3\0\27\33\24\0\4\33\5\0\22\33\1\170"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\22\33\1\171"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\10\33\1\172\16\33\24\0\4\33\5\0\30\33\3\0"+
    "\21\33\1\173\5\33\24\0\4\33\5\0\21\33\1\174"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\21\33\1\175"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\13\33\1\176"+
    "\14\33\3\0\27\33\24\0\4\33\5\0\13\33\1\177"+
    "\14\33\3\0\27\33\24\0\4\33\5\0\24\33\1\200"+
    "\3\33\3\0\27\33\24\0\4\33\5\0\22\33\1\201"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\21\33\1\202"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\2\33\1\203"+
    "\25\33\3\0\27\33\24\0\4\33\5\0\23\33\1\204"+
    "\4\33\3\0\27\33\24\0\4\33\5\0\4\33\1\205"+
    "\23\33\3\0\27\33\24\0\4\33\5\0\1\206\27\33"+
    "\3\0\27\33\24\0\4\33\5\0\22\33\1\207\5\33"+
    "\3\0\27\33\24\0\4\33\5\0\30\33\3\0\5\33"+
    "\1\210\21\33\24\0\4\33\5\0\1\33\1\211\26\33"+
    "\3\0\27\33\24\0\4\33\5\0\22\33\1\212\5\33"+
    "\3\0\27\33\24\0\4\33\5\0\1\213\27\33\3\0"+
    "\27\33\24\0\4\33\5\0\23\33\1\214\4\33\3\0"+
    "\27\33\24\0\4\33\5\0\15\33\1\215\12\33\3\0"+
    "\27\33\24\0\4\33\5\0\21\33\1\216\6\33\3\0"+
    "\27\33\24\0\4\33\5\0\22\33\1\217\5\33\3\0"+
    "\27\33\24\0\4\33\5\0\23\33\1\220\4\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\20\33\1\221"+
    "\6\33\24\0\4\33\5\0\13\33\1\222\14\33\3\0"+
    "\27\33\24\0\4\33\5\0\17\33\1\223\10\33\3\0"+
    "\27\33\24\0\4\33\5\0\4\33\1\224\23\33\3\0"+
    "\27\33\24\0\4\33\5\0\13\33\1\225\14\33\3\0"+
    "\27\33\24\0\4\33\5\0\10\33\1\226\17\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\13\33\1\227"+
    "\13\33\24\0\4\33\5\0\30\33\3\0\4\33\1\230"+
    "\22\33\24\0\4\33\5\0\21\33\1\231\6\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\22\33\1\232"+
    "\4\33\24\0\4\33\5\0\30\33\3\0\22\33\1\233"+
    "\4\33\24\0\4\33\5\0\30\33\3\0\12\33\1\234"+
    "\14\33\24\0\4\33\5\0\30\33\3\0\17\33\1\235"+
    "\7\33\24\0\4\33\5\0\30\33\3\0\14\33\1\236"+
    "\12\33\24\0\4\33\5\0\30\33\3\0\21\33\1\237"+
    "\5\33\24\0\4\33\5\0\30\33\3\0\16\33\1\240"+
    "\10\33\24\0\4\33\5\0\30\33\3\0\3\33\1\241"+
    "\23\33\24\0\4\33\5\0\30\33\3\0\12\33\1\242"+
    "\14\33\24\0\4\33\5\0\30\33\3\0\21\33\1\243"+
    "\5\33\24\0\4\33\5\0\30\33\3\0\22\33\1\244"+
    "\4\33\24\0\4\33\5\0\30\33\3\0\17\33\1\245"+
    "\7\33\2\0\4\161\1\246\20\161\1\0\71\161\73\0"+
    "\1\247\45\0\4\163\11\0\1\250\26\0\1\251\3\0"+
    "\1\250\46\0\4\164\113\0\4\165\5\0\30\33\3\0"+
    "\27\33\24\0\4\166\5\0\4\33\1\74\23\33\3\0"+
    "\4\33\1\74\22\33\24\0\4\33\5\0\4\33\1\252"+
    "\23\33\3\0\27\33\24\0\4\33\5\0\21\33\1\253"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\12\33\1\254"+
    "\7\33\1\255\5\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\7\33\1\256\17\33\24\0\4\33\5\0"+
    "\1\257\27\33\3\0\27\33\24\0\4\33\5\0\16\33"+
    "\1\260\11\33\3\0\27\33\24\0\4\33\5\0\4\33"+
    "\1\261\23\33\3\0\27\33\24\0\4\33\5\0\1\33"+
    "\1\262\26\33\3\0\27\33\24\0\4\33\5\0\4\33"+
    "\1\263\23\33\3\0\27\33\24\0\4\33\5\0\16\33"+
    "\1\264\11\33\3\0\27\33\24\0\4\33\5\0\13\33"+
    "\1\265\14\33\3\0\27\33\24\0\4\33\5\0\1\266"+
    "\27\33\3\0\27\33\24\0\4\33\5\0\3\33\1\267"+
    "\24\33\3\0\27\33\24\0\4\33\5\0\23\33\1\270"+
    "\4\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\10\33\1\271\16\33\24\0\4\33\5\0\1\272\27\33"+
    "\3\0\27\33\24\0\4\33\5\0\22\33\1\273\5\33"+
    "\3\0\27\33\24\0\4\33\5\0\3\33\1\274\24\33"+
    "\3\0\27\33\24\0\4\33\5\0\30\33\3\0\1\275"+
    "\26\33\24\0\4\33\5\0\2\33\1\276\25\33\3\0"+
    "\27\33\24\0\4\33\5\0\23\33\1\277\4\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\20\33\1\300"+
    "\6\33\24\0\4\33\5\0\5\33\1\301\22\33\3\0"+
    "\27\33\24\0\4\33\5\0\4\33\1\302\23\33\3\0"+
    "\27\33\24\0\4\33\5\0\15\33\1\303\12\33\3\0"+
    "\27\33\24\0\4\33\5\0\3\33\1\304\24\33\3\0"+
    "\27\33\24\0\4\33\5\0\17\33\1\305\10\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\4\33\1\306"+
    "\22\33\24\0\4\33\5\0\30\33\3\0\17\33\1\307"+
    "\7\33\24\0\4\33\5\0\1\33\1\310\26\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\20\33\1\311"+
    "\6\33\24\0\4\33\5\0\30\33\3\0\14\33\1\312"+
    "\12\33\24\0\4\33\5\0\30\33\3\0\20\33\1\313"+
    "\6\33\24\0\4\33\5\0\30\33\3\0\2\33\1\314"+
    "\24\33\24\0\4\33\5\0\30\33\3\0\16\33\1\315"+
    "\10\33\24\0\4\33\5\0\30\33\3\0\15\33\1\316"+
    "\11\33\24\0\4\33\5\0\30\33\3\0\4\33\1\317"+
    "\22\33\24\0\4\33\5\0\30\33\3\0\12\33\1\320"+
    "\14\33\24\0\4\33\5\0\30\33\3\0\22\33\1\321"+
    "\4\33\24\0\4\33\5\0\30\33\3\0\4\33\1\322"+
    "\22\33\6\0\1\323\210\0\1\324\35\0\1\164\1\0"+
    "\1\164\2\0\4\164\113\0\4\325\113\0\4\33\5\0"+
    "\21\33\1\326\6\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\4\33\1\327\22\33\24\0\4\33\5\0"+
    "\30\33\3\0\4\33\1\330\22\33\24\0\4\33\5\0"+
    "\30\33\3\0\4\33\1\331\22\33\24\0\4\33\5\0"+
    "\30\33\3\0\15\33\1\332\11\33\24\0\4\33\5\0"+
    "\23\33\1\333\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\15\33\1\334\12\33\3\0\27\33\24\0\4\33\5\0"+
    "\23\33\1\335\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\13\33\1\336\14\33\3\0\27\33\24\0\4\33\5\0"+
    "\21\33\1\337\6\33\3\0\27\33\24\0\4\33\5\0"+
    "\1\340\27\33\3\0\27\33\24\0\4\33\5\0\23\33"+
    "\1\341\4\33\3\0\27\33\24\0\4\33\5\0\30\33"+
    "\3\0\14\33\1\342\12\33\24\0\4\33\5\0\15\33"+
    "\1\343\12\33\3\0\27\33\24\0\4\33\5\0\30\33"+
    "\3\0\1\344\26\33\24\0\4\33\5\0\4\33\1\345"+
    "\23\33\3\0\27\33\24\0\4\33\5\0\4\33\1\346"+
    "\23\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\24\33\1\347\2\33\24\0\4\33\5\0\21\33\1\350"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\4\33\1\351"+
    "\23\33\3\0\27\33\24\0\4\33\5\0\13\33\1\352"+
    "\14\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\15\33\1\353\11\33\24\0\4\33\5\0\30\33\3\0"+
    "\14\33\1\354\12\33\24\0\4\33\5\0\1\355\27\33"+
    "\3\0\27\33\24\0\4\33\5\0\30\33\3\0\21\33"+
    "\1\356\5\33\24\0\4\33\5\0\30\33\3\0\21\33"+
    "\1\357\5\33\24\0\4\33\5\0\30\33\3\0\4\33"+
    "\1\360\22\33\24\0\4\33\5\0\30\33\3\0\21\33"+
    "\1\361\5\33\24\0\4\33\1\362\4\0\30\33\3\0"+
    "\20\33\1\363\6\33\24\0\4\33\5\0\30\33\3\0"+
    "\17\33\1\364\7\33\24\0\4\33\5\0\30\33\3\0"+
    "\17\33\1\365\7\33\6\0\1\366\214\0\1\367\36\0"+
    "\4\325\11\0\1\250\32\0\1\250\46\0\4\33\5\0"+
    "\23\33\1\370\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\6\33\1\371\20\33\24\0\4\33\5\0"+
    "\30\33\3\0\25\33\1\372\1\33\24\0\4\33\5\0"+
    "\30\33\3\0\20\33\1\373\6\33\24\0\4\33\5\0"+
    "\30\33\3\0\17\33\1\374\7\33\24\0\2\33\1\375"+
    "\1\376\5\0\30\33\3\0\27\33\24\0\4\33\5\0"+
    "\4\33\1\377\23\33\3\0\27\33\24\0\4\33\5\0"+
    "\4\33\1\u0100\23\33\3\0\27\33\24\0\4\33\5\0"+
    "\14\33\1\u0101\13\33\3\0\27\33\24\0\4\33\5\0"+
    "\4\33\1\u0102\23\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\10\33\1\u0103\16\33\24\0\4\33\5\0"+
    "\1\u0104\27\33\3\0\27\33\24\0\4\33\5\0\4\33"+
    "\1\u0105\16\33\1\u0106\4\33\3\0\27\33\24\0\4\33"+
    "\5\0\20\33\1\u0107\7\33\3\0\27\33\24\0\4\33"+
    "\5\0\15\33\1\u0108\12\33\3\0\27\33\24\0\4\33"+
    "\5\0\30\33\3\0\15\33\1\u0109\11\33\24\0\4\33"+
    "\5\0\4\33\1\u010a\23\33\3\0\27\33\24\0\4\33"+
    "\5\0\30\33\3\0\22\33\1\u010b\4\33\24\0\4\33"+
    "\5\0\30\33\3\0\1\33\1\u010c\25\33\24\0\4\33"+
    "\5\0\23\33\1\u010d\4\33\3\0\27\33\24\0\4\33"+
    "\5\0\30\33\3\0\4\33\1\u010e\22\33\24\0\4\33"+
    "\5\0\30\33\3\0\10\33\1\u010f\16\33\23\0\1\u0110"+
    "\11\0\30\u0110\3\0\27\u0110\24\0\4\33\1\362\4\0"+
    "\30\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\21\33\1\u0111\5\33\24\0\4\33\5\0\30\33\3\0"+
    "\14\33\1\u0112\12\33\100\0\1\u0113\42\0\4\33\5\0"+
    "\30\33\3\0\10\33\1\u0114\16\33\24\0\4\33\5\0"+
    "\10\33\1\u0115\11\33\1\u0116\5\33\3\0\27\33\24\0"+
    "\4\33\5\0\30\33\3\0\20\33\1\u0117\6\33\24\0"+
    "\4\33\5\0\30\33\3\0\10\33\1\u0118\16\33\24\0"+
    "\4\33\5\0\30\33\3\0\1\u0119\26\33\24\0\4\33"+
    "\5\0\1\u011a\27\33\3\0\27\33\24\0\4\33\5\0"+
    "\21\33\1\u011b\6\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\21\33\1\u011c\5\33\24\0\4\33\5\0"+
    "\30\33\3\0\1\u011d\26\33\24\0\4\33\5\0\20\33"+
    "\1\u011e\7\33\3\0\27\33\24\0\4\33\5\0\7\33"+
    "\1\u011f\20\33\3\0\27\33\24\0\4\33\5\0\24\33"+
    "\1\u0120\3\33\3\0\27\33\24\0\4\33\5\0\23\33"+
    "\1\u0121\4\33\3\0\27\33\24\0\4\33\5\0\30\33"+
    "\3\0\17\33\1\u0122\7\33\24\0\4\33\5\0\30\33"+
    "\3\0\1\u0123\26\33\24\0\4\33\5\0\30\33\3\0"+
    "\21\33\1\u0124\5\33\24\0\4\33\5\0\30\33\3\0"+
    "\13\33\1\u0125\13\33\24\0\4\33\5\0\10\33\1\u0126"+
    "\17\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\17\33\1\u0127\7\33\24\0\4\33\5\0\30\33\3\0"+
    "\15\33\1\u0128\11\33\11\0\2\u0110\3\0\1\u0110\2\0"+
    "\10\u0110\3\0\31\u0110\1\0\1\u0110\1\0\27\u0110\111\0"+
    "\1\u0129\31\0\4\33\5\0\30\33\3\0\15\33\1\u012a"+
    "\11\33\24\0\4\33\5\0\30\33\3\0\3\33\1\u012b"+
    "\23\33\24\0\4\33\5\0\30\33\3\0\4\33\1\u012c"+
    "\22\33\24\0\4\33\5\0\30\33\3\0\10\33\1\u012d"+
    "\16\33\24\0\4\33\5\0\30\33\3\0\26\33\1\u012e"+
    "\24\0\4\33\5\0\1\u012f\1\u0130\2\33\1\u0131\1\33"+
    "\1\u0132\4\33\1\u0133\14\33\3\0\27\33\24\0\4\33"+
    "\5\0\23\33\1\u0134\4\33\3\0\27\33\24\0\4\33"+
    "\5\0\30\33\3\0\1\u0135\26\33\24\0\4\33\5\0"+
    "\30\33\3\0\25\33\1\215\1\33\24\0\4\33\5\0"+
    "\7\33\1\u0136\20\33\3\0\27\33\24\0\4\33\5\0"+
    "\24\33\1\u0137\3\33\3\0\27\33\24\0\4\33\5\0"+
    "\1\u0138\27\33\3\0\27\33\24\0\4\33\5\0\1\u0139"+
    "\27\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\3\33\1\u013a\23\33\24\0\4\33\5\0\1\33\1\u013b"+
    "\26\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\4\33\1\u013c\22\33\24\0\4\33\5\0\14\33\1\u013d"+
    "\13\33\3\0\27\33\24\0\4\33\5\0\30\33\3\0"+
    "\14\33\1\u013e\12\33\115\0\1\u013f\25\0\4\33\5\0"+
    "\30\33\3\0\14\33\1\u0140\12\33\24\0\4\33\5\0"+
    "\30\33\3\0\2\33\1\u0141\24\33\24\0\4\33\5\0"+
    "\30\33\3\0\15\33\1\u0142\11\33\24\0\4\33\5\0"+
    "\30\33\3\0\1\33\1\u0143\25\33\24\0\4\33\5\0"+
    "\15\33\1\u0144\12\33\3\0\27\33\24\0\4\33\5\0"+
    "\1\u0145\27\33\3\0\27\33\24\0\4\33\5\0\20\33"+
    "\1\u0146\7\33\3\0\27\33\24\0\4\33\5\0\21\33"+
    "\1\u0147\6\33\3\0\27\33\24\0\4\33\5\0\4\33"+
    "\1\u0148\23\33\3\0\27\33\24\0\4\33\5\0\10\33"+
    "\1\u0149\17\33\3\0\27\33\24\0\4\33\5\0\4\33"+
    "\1\u014a\16\33\1\u014b\4\33\3\0\27\33\24\0\4\33"+
    "\5\0\16\33\1\u014c\11\33\3\0\27\33\24\0\4\33"+
    "\5\0\1\u014d\27\33\3\0\27\33\24\0\4\33\5\0"+
    "\15\33\1\u014e\12\33\3\0\27\33\24\0\4\33\5\0"+
    "\13\33\1\u014f\14\33\3\0\27\33\24\0\4\33\5\0"+
    "\1\u0150\27\33\3\0\27\33\24\0\4\33\5\0\30\33"+
    "\3\0\1\u0151\26\33\24\0\4\33\5\0\30\33\3\0"+
    "\17\33\1\u0152\7\33\24\0\4\33\5\0\30\33\3\0"+
    "\14\33\1\u0153\12\33\24\0\4\33\5\0\30\33\3\0"+
    "\21\33\1\u0154\5\33\24\0\4\33\5\0\3\33\1\u0155"+
    "\24\33\3\0\27\33\24\0\4\33\5\0\21\33\1\u0156"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\24\33\1\u0157"+
    "\3\33\3\0\27\33\24\0\4\33\5\0\4\33\1\u0158"+
    "\23\33\3\0\27\33\24\0\4\33\5\0\22\33\1\u0159"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\16\33\1\u015a"+
    "\11\33\3\0\27\33\24\0\4\33\5\0\20\33\1\u015b"+
    "\7\33\3\0\27\33\24\0\4\33\5\0\7\33\1\u015c"+
    "\20\33\3\0\27\33\24\0\4\33\5\0\22\33\1\u015d"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\13\33\1\u015e"+
    "\14\33\3\0\27\33\24\0\4\33\5\0\21\33\1\u015f"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\3\33\1\u0160"+
    "\16\33\1\u0161\5\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\4\33\1\u0162\22\33\24\0\4\33\5\0"+
    "\23\33\1\u0163\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\10\33\1\u0164\16\33\24\0\4\33\5\0"+
    "\1\u0165\27\33\3\0\27\33\24\0\4\33\5\0\1\u0166"+
    "\27\33\3\0\27\33\24\0\4\33\5\0\22\33\1\u0167"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\15\33\1\u0168"+
    "\12\33\3\0\27\33\24\0\4\33\5\0\24\33\1\u0169"+
    "\3\33\3\0\27\33\24\0\4\33\5\0\1\u016a\27\33"+
    "\3\0\27\33\24\0\4\33\5\0\23\33\1\u016b\4\33"+
    "\3\0\27\33\24\0\4\33\5\0\30\33\3\0\1\u016c"+
    "\26\33\24\0\4\33\5\0\16\33\1\u016d\11\33\3\0"+
    "\27\33\24\0\4\33\5\0\10\33\1\u016e\17\33\3\0"+
    "\27\33\24\0\4\33\5\0\30\33\3\0\21\33\1\u016f"+
    "\5\33\24\0\4\33\5\0\30\33\3\0\15\33\1\u0170"+
    "\11\33\24\0\4\33\5\0\30\33\3\0\15\33\1\u0171"+
    "\11\33\24\0\4\33\5\0\13\33\1\u0172\14\33\3\0"+
    "\27\33\24\0\4\33\5\0\23\33\1\u0173\4\33\3\0"+
    "\27\33\24\0\4\33\5\0\1\u0174\27\33\3\0\27\33"+
    "\24\0\4\33\5\0\15\33\1\u0175\12\33\3\0\27\33"+
    "\24\0\4\33\5\0\20\33\1\u0176\7\33\3\0\27\33"+
    "\24\0\4\33\5\0\24\33\1\u0177\3\33\3\0\27\33"+
    "\24\0\4\33\5\0\15\33\1\u0178\12\33\3\0\27\33"+
    "\24\0\4\33\5\0\30\33\3\0\11\33\1\u0179\15\33"+
    "\24\0\4\33\5\0\30\33\3\0\14\33\1\u017a\12\33"+
    "\24\0\4\33\5\0\4\33\1\u017b\23\33\3\0\27\33"+
    "\24\0\4\33\5\0\13\33\1\u017c\14\33\3\0\27\33"+
    "\24\0\4\33\5\0\24\33\1\u017d\3\33\3\0\27\33"+
    "\24\0\4\33\5\0\1\33\1\u017e\26\33\3\0\27\33"+
    "\24\0\4\33\5\0\6\33\1\u017f\21\33\3\0\27\33"+
    "\24\0\4\33\5\0\30\33\3\0\4\33\1\u0180\22\33"+
    "\24\0\4\33\5\0\21\33\1\u0181\6\33\3\0\27\33"+
    "\24\0\4\33\5\0\16\33\1\u0182\11\33\3\0\27\33"+
    "\24\0\4\33\5\0\13\33\1\u0183\14\33\3\0\27\33"+
    "\24\0\4\33\5\0\13\33\1\u0184\14\33\3\0\27\33"+
    "\24\0\4\33\5\0\30\33\3\0\14\33\1\u0185\12\33"+
    "\24\0\4\33\5\0\23\33\1\u0186\4\33\3\0\27\33"+
    "\24\0\4\33\5\0\4\33\1\u0187\23\33\3\0\27\33"+
    "\24\0\4\33\5\0\4\33\1\u0188\23\33\3\0\27\33"+
    "\24\0\4\33\5\0\4\33\1\u0189\23\33\3\0\27\33"+
    "\24\0\4\33\5\0\30\33\3\0\1\u018a\26\33\24\0"+
    "\4\33\5\0\30\33\3\0\1\u018b\26\33\24\0\4\33"+
    "\5\0\3\33\1\u018c\24\33\3\0\27\33\24\0\4\33"+
    "\5\0\20\33\1\u018d\7\33\3\0\27\33\24\0\4\33"+
    "\5\0\20\33\1\u018e\7\33\3\0\27\33\24\0\4\33"+
    "\5\0\30\33\3\0\1\u018f\26\33\24\0\4\33\5\0"+
    "\24\33\1\u0190\3\33\3\0\27\33\24\0\4\33\5\0"+
    "\24\33\1\u0191\3\33\3\0\27\33\24\0\4\33\5\0"+
    "\22\33\1\u0192\5\33\3\0\27\33\24\0\4\33\5\0"+
    "\16\33\1\u0193\11\33\3\0\27\33\24\0\4\33\5\0"+
    "\16\33\1\u0194\11\33\3\0\27\33\24\0\4\33\5\0"+
    "\23\33\1\u0195\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\23\33\1\u0196\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\23\33\1\u0197\4\33\3\0\27\33\24\0\4\33\5\0"+
    "\21\33\1\u0198\6\33\3\0\27\33\24\0\4\33\5\0"+
    "\4\33\1\u0199\23\33\3\0\27\33\24\0\4\33\5\0"+
    "\4\33\1\u019a\23\33\3\0\27\33\24\0\4\33\5\0"+
    "\10\33\1\u019b\17\33\3\0\27\33\24\0\4\33\5\0"+
    "\3\33\1\u019c\24\33\3\0\27\33\24\0\4\33\5\0"+
    "\3\33\1\u019d\24\33\3\0\27\33\24\0\4\33\5\0"+
    "\15\33\1\u019e\12\33\3\0\27\33\24\0\4\33\5\0"+
    "\30\33\3\0\1\u019f\26\33\24\0\4\33\5\0\30\33"+
    "\3\0\1\u01a0\26\33\24\0\4\33\5\0\6\33\1\u01a1"+
    "\21\33\3\0\27\33\24\0\4\33\5\0\22\33\1\u01a2"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\22\33\1\u01a3"+
    "\5\33\3\0\27\33\24\0\4\33\5\0\23\33\1\u01a4"+
    "\4\33\3\0\27\33\24\0\4\33\5\0\23\33\1\u01a5"+
    "\4\33\3\0\27\33\24\0\4\33\5\0\21\33\1\u01a6"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\21\33\1\u01a7"+
    "\6\33\3\0\27\33\24\0\4\33\5\0\10\33\1\u01a8"+
    "\17\33\3\0\27\33\24\0\4\33\5\0\10\33\1\u01a9"+
    "\17\33\3\0\27\33\24\0\4\33\5\0\15\33\1\u01aa"+
    "\12\33\3\0\27\33\24\0\4\33\5\0\15\33\1\u01ab"+
    "\12\33\3\0\27\33\24\0\4\33\5\0\6\33\1\u01ac"+
    "\21\33\3\0\27\33\24\0\4\33\5\0\6\33\1\u01ad"+
    "\21\33\3\0\27\33\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27729];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\5\11\1\1\2\11"+
    "\2\1\3\11\22\1\2\11\10\1\2\11\2\1\1\0"+
    "\2\11\1\1\1\11\2\0\64\1\1\11\1\1\1\0"+
    "\63\1\2\0\1\1\1\0\51\1\2\0\35\1\1\0"+
    "\3\1\1\11\1\0\33\1\1\0\25\1\1\0\25\1"+
    "\1\11\156\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /* user code: */
  public _EDQLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _EDQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 3:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 86: break;
          case 4:
            { return LINE_COMMENT;
            }
          // fall through
          case 87: break;
          case 5:
            { return DOLLAR;
            }
          // fall through
          case 88: break;
          case 6:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 89: break;
          case 7:
            { return L_PAREN;
            }
          // fall through
          case 90: break;
          case 8:
            { return R_PAREN;
            }
          // fall through
          case 91: break;
          case 9:
            { return ASTERISK;
            }
          // fall through
          case 92: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 93: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 94: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 95: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 96: break;
          case 14:
            { return SLASH;
            }
          // fall through
          case 97: break;
          case 15:
            { return NUMBER;
            }
          // fall through
          case 98: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 99: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 100: break;
          case 18:
            { return EQUAL;
            }
          // fall through
          case 101: break;
          case 19:
            { return IDENTIFIER;
            }
          // fall through
          case 102: break;
          case 20:
            { return L_BRACKET;
            }
          // fall through
          case 103: break;
          case 21:
            { return R_BRACKET;
            }
          // fall through
          case 104: break;
          case 22:
            { return L_CURLY;
            }
          // fall through
          case 105: break;
          case 23:
            { return R_CURLY;
            }
          // fall through
          case 106: break;
          case 24:
            { return MAPPING;
            }
          // fall through
          case 107: break;
          case 25:
            { return QUERY;
            }
          // fall through
          case 108: break;
          case 26:
            { return IF;
            }
          // fall through
          case 109: break;
          case 27:
            { return IN;
            }
          // fall through
          case 110: break;
          case 28:
            { return TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 111: break;
          case 29:
            { return AND;
            }
          // fall through
          case 112: break;
          case 30:
            { return BAR;
            }
          // fall through
          case 113: break;
          case 31:
            { return GET;
            }
          // fall through
          case 114: break;
          case 32:
            { return PUT;
            }
          // fall through
          case 115: break;
          case 33:
            { return FOR;
            }
          // fall through
          case 116: break;
          case 34:
            { return VAR;
            }
          // fall through
          case 117: break;
          case 35:
            { return ELSE;
            }
          // fall through
          case 118: break;
          case 36:
            { return HEAD;
            }
          // fall through
          case 119: break;
          case 37:
            { return HOST;
            }
          // fall through
          case 120: break;
          case 38:
            { return LOAD;
            }
          // fall through
          case 121: break;
          case 39:
            { return POST;
            }
          // fall through
          case 122: break;
          case 40:
            { return SELF;
            }
          // fall through
          case 123: break;
          case 41:
            { return THEN;
            }
          // fall through
          case 124: break;
          case 42:
            { return NODE;
            }
          // fall through
          case 125: break;
          case 43:
            { return NULL;
            }
          // fall through
          case 126: break;
          case 44:
            { return TRUE;
            }
          // fall through
          case 127: break;
          case 45:
            { return CARAT;
            }
          // fall through
          case 128: break;
          case 46:
            { return ERROR;
            }
          // fall through
          case 129: break;
          case 47:
            { return SUPER;
            }
          // fall through
          case 130: break;
          case 48:
            { return TILDE;
            }
          // fall through
          case 131: break;
          case 49:
            { return COUNT;
            }
          // fall through
          case 132: break;
          case 50:
            { return FALSE;
            }
          // fall through
          case 133: break;
          case 51:
            { return ASSERT;
            }
          // fall through
          case 134: break;
          case 52:
            { return COLON2;
            }
          // fall through
          case 135: break;
          case 53:
            { return COLON3;
            }
          // fall through
          case 136: break;
          case 54:
            { return DELETE;
            }
          // fall through
          case 137: break;
          case 55:
            { return HOST_PATH;
            }
          // fall through
          case 138: break;
          case 56:
            { return IMPORT;
            }
          // fall through
          case 139: break;
          case 57:
            { return RETURN;
            }
          // fall through
          case 140: break;
          case 58:
            { return PERCENT;
            }
          // fall through
          case 141: break;
          case 59:
            { return TIMEOUT;
            }
          // fall through
          case 142: break;
          case 60:
            { return CLUSTER;
            }
          // fall through
          case 143: break;
          case 61:
            { return APIKEYID;
            }
          // fall through
          case 144: break;
          case 62:
            { return PASSWORD;
            }
          // fall through
          case 145: break;
          case 63:
            { return USERNAME;
            }
          // fall through
          case 146: break;
          case 64:
            { return FUNCTION;
            }
          // fall through
          case 147: break;
          case 65:
            { return AWSREGION;
            }
          // fall through
          case 148: break;
          case 66:
            { return LESS_THAN;
            }
          // fall through
          case 149: break;
          case 67:
            { return NOT_EQUAL;
            }
          // fall through
          case 150: break;
          case 68:
            { return DOUBLE_AND;
            }
          // fall through
          case 151: break;
          case 69:
            { return DOUBLE_BAR;
            }
          // fall through
          case 152: break;
          case 70:
            { return LESS_EQUAL;
            }
          // fall through
          case 153: break;
          case 71:
            { return DOUBLE_LESS;
            }
          // fall through
          case 154: break;
          case 72:
            { return EXCLAMATION;
            }
          // fall through
          case 155: break;
          case 73:
            { return KIBANA_HOST;
            }
          // fall through
          case 156: break;
          case 74:
            { return APIKEYSECRET;
            }
          // fall through
          case 157: break;
          case 75:
            { return DOUBLE_EQUAL;
            }
          // fall through
          case 158: break;
          case 76:
            { return GREATER_THAN;
            }
          // fall through
          case 159: break;
          case 77:
            { return AUTH;
            }
          // fall through
          case 160: break;
          case 78:
            { return GREATER_EQUAL;
            }
          // fall through
          case 161: break;
          case 79:
            { return DOUBLE_GREATER;
            }
          // fall through
          case 162: break;
          case 80:
            { return APISESSIONTOKEN;
            }
          // fall through
          case 163: break;
          case 81:
            { return TRIPLE_BAR_QUOTED_STRING;
            }
          // fall through
          case 164: break;
          case 82:
            { return VERBATIM_DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 165: break;
          case 83:
            { return VERBATIM_SINGLE_QUOTED_STRING;
            }
          // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
