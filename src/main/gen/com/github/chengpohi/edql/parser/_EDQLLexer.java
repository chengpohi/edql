// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _EDQLLexer.flex

package com.github.chengpohi.edql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.chengpohi.edql.parser.psi.EDQLTypes.*;


public class _EDQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\6\23\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\10\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\2\44\1\63\1\64\1\65\1\66\1\67"+
    "\1\0\1\70\1\44\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\44\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\44\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\44\1\114\1\115\1\116\1\117\1\120\7\0\1\1"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\1\21\23\1\24\1\25\10\23"+
    "\1\26\1\27\2\3\1\0\1\4\1\0\1\30\1\23"+
    "\1\0\1\17\1\31\21\23\1\32\31\23\1\33\5\23"+
    "\1\3\1\0\3\17\1\34\4\23\1\35\7\23\1\36"+
    "\10\23\1\17\2\23\1\37\14\23\1\40\7\23\1\41"+
    "\2\0\1\17\11\23\1\42\3\23\1\43\1\44\3\23"+
    "\1\45\2\23\1\46\1\23\1\47\1\23\1\50\13\23"+
    "\1\51\1\52\1\23\1\53\1\54\2\0\5\23\1\55"+
    "\3\23\1\56\10\23\1\57\1\60\5\23\1\61\1\62"+
    "\5\23\1\54\1\0\1\63\4\23\1\64\1\65\1\66"+
    "\20\23\1\67\1\23\1\70\1\71\1\0\15\23\1\72"+
    "\2\23\1\73\2\23\1\74\2\23\1\75\16\23\1\76"+
    "\1\23\1\77\1\23\1\100\1\101\15\23\1\102\1\103"+
    "\5\23\1\104\1\105\7\23\1\106\10\23\1\107\1\110"+
    "\2\23\1\111\3\23\1\112\2\23\1\113\2\23\1\114"+
    "\4\23\1\115\1\23\1\116\4\23\1\117\3\23\1\120"+
    "\33\23\1\121\12\23\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\121\0\u0195\0\121"+
    "\0\121\0\121\0\121\0\121\0\u01e6\0\121\0\121\0\u0237"+
    "\0\u0288\0\121\0\121\0\121\0\u02d9\0\u032a\0\u037b\0\u03cc"+
    "\0\u041d\0\u046e\0\u04bf\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654"+
    "\0\u06a5\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a\0\121\0\121"+
    "\0\u088b\0\u08dc\0\u092d\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2"+
    "\0\121\0\121\0\u0b13\0\u0b64\0\u0bb5\0\121\0\u0c06\0\121"+
    "\0\u0c57\0\u0ca8\0\u0cf9\0\u0d4a\0\u0d9b\0\u0dec\0\u0e3d\0\u0e8e"+
    "\0\u0edf\0\u0f30\0\u0f81\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u1116"+
    "\0\u1167\0\u11b8\0\u1209\0\u125a\0\u12ab\0\u04bf\0\u12fc\0\u134d"+
    "\0\u139e\0\u13ef\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584\0\u15d5"+
    "\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c\0\u185d"+
    "\0\u18ae\0\u18ff\0\u1950\0\u19a1\0\u19f2\0\u1a43\0\u1a94\0\u04bf"+
    "\0\u1ae5\0\u1b36\0\u1b87\0\u1bd8\0\u1c29\0\121\0\u1c7a\0\u1ccb"+
    "\0\u1d1c\0\u1d6d\0\u04bf\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u04bf"+
    "\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5\0\u2046\0\u2097\0\u20e8\0\u04bf"+
    "\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d\0\u22ce\0\u231f\0\u2370"+
    "\0\u04bf\0\u23c1\0\u2412\0\u04bf\0\u2463\0\u24b4\0\u2505\0\u2556"+
    "\0\u25a7\0\u25f8\0\u2649\0\u269a\0\u26eb\0\u273c\0\u278d\0\u27de"+
    "\0\u04bf\0\u282f\0\u2880\0\u28d1\0\u2922\0\u2973\0\u29c4\0\u2a15"+
    "\0\u04bf\0\u2a66\0\u2ab7\0\u2b08\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c"+
    "\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90\0\u2de1\0\u04bf\0\u2e32\0\u2e83"+
    "\0\u2ed4\0\u04bf\0\u04bf\0\u2f25\0\u2f76\0\u2fc7\0\u04bf\0\u3018"+
    "\0\u3069\0\u04bf\0\u30ba\0\u04bf\0\u310b\0\u04bf\0\u315c\0\u31ad"+
    "\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342\0\u3393\0\u33e4\0\u3435"+
    "\0\u3486\0\u04bf\0\u04bf\0\u34d7\0\u04bf\0\u3528\0\u3579\0\u35ca"+
    "\0\u361b\0\u366c\0\u36bd\0\u370e\0\u375f\0\u04bf\0\u37b0\0\u3801"+
    "\0\u3852\0\u04bf\0\u38a3\0\u38f4\0\u3945\0\u3996\0\u39e7\0\u3a38"+
    "\0\u3a89\0\u3ada\0\u04bf\0\u04bf\0\u3b2b\0\u3b7c\0\u3bcd\0\u3c1e"+
    "\0\u3c6f\0\u04bf\0\u04bf\0\u3cc0\0\u3d11\0\u3d62\0\u3db3\0\u3e04"+
    "\0\121\0\u3e55\0\u04bf\0\u3ea6\0\u3ef7\0\u3f48\0\u3f99\0\u04bf"+
    "\0\u04bf\0\u04bf\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f"+
    "\0\u41d0\0\u4221\0\u4272\0\u42c3\0\u4314\0\u4365\0\u43b6\0\u4407"+
    "\0\u4458\0\u44a9\0\u44fa\0\u454b\0\u04bf\0\u04bf\0\u459c\0\u45ed"+
    "\0\u463e\0\u468f\0\u46e0\0\u4731\0\u4782\0\u47d3\0\u4824\0\u4875"+
    "\0\u48c6\0\u4917\0\u4968\0\u49b9\0\u04bf\0\u4a0a\0\u4a5b\0\u04bf"+
    "\0\u4aac\0\u4afd\0\u04bf\0\u4b4e\0\u4b9f\0\u04bf\0\u4bf0\0\u4c41"+
    "\0\u4c92\0\u4ce3\0\u4d34\0\u4d85\0\u4dd6\0\u4e27\0\u4e78\0\u4ec9"+
    "\0\u4f1a\0\u4f6b\0\u4fbc\0\u500d\0\u04bf\0\u505e\0\u04bf\0\u50af"+
    "\0\u04bf\0\u04bf\0\u5100\0\u5151\0\u51a2\0\u51f3\0\u5244\0\u5295"+
    "\0\u52e6\0\u5337\0\u5388\0\u53d9\0\u542a\0\u547b\0\u54cc\0\u04bf"+
    "\0\u04bf\0\u551d\0\u556e\0\u55bf\0\u5610\0\u5661\0\u04bf\0\u04bf"+
    "\0\u56b2\0\u5703\0\u5754\0\u57a5\0\u57f6\0\u5847\0\u5898\0\u04bf"+
    "\0\u58e9\0\u593a\0\u598b\0\u59dc\0\u5a2d\0\u5a7e\0\u5acf\0\u5b20"+
    "\0\u04bf\0\u04bf\0\u5b71\0\u5bc2\0\u04bf\0\u5c13\0\u5c64\0\u5cb5"+
    "\0\u04bf\0\u5d06\0\u5d57\0\u04bf\0\u5da8\0\u5df9\0\u04bf\0\u5e4a"+
    "\0\u5e9b\0\u5eec\0\u5f3d\0\u04bf\0\u5f8e\0\u04bf\0\u5fdf\0\u6030"+
    "\0\u6081\0\u60d2\0\u04bf\0\u6123\0\u6174\0\u61c5\0\u04bf\0\u6216"+
    "\0\u6267\0\u62b8\0\u6309\0\u635a\0\u63ab\0\u63fc\0\u644d\0\u649e"+
    "\0\u64ef\0\u6540\0\u6591\0\u65e2\0\u6633\0\u6684\0\u66d5\0\u6726"+
    "\0\u6777\0\u67c8\0\u6819\0\u686a\0\u68bb\0\u690c\0\u695d\0\u69ae"+
    "\0\u69ff\0\u6a50\0\u04bf\0\u6aa1\0\u6af2\0\u6b43\0\u6b94\0\u6be5"+
    "\0\u6c36\0\u6c87\0\u6cd8\0\u6d29\0\u6d7a\0\u04bf\0\u04bf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\3\21\1\22\1\23\1\24\1\2\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\33"+
    "\1\37\1\40\1\33\1\41\1\33\1\42\2\33\1\43"+
    "\1\44\1\45\1\46\2\33\1\47\1\2\1\50\1\2"+
    "\2\33\1\51\2\33\1\52\1\33\1\53\1\54\3\33"+
    "\1\55\2\33\1\56\1\33\1\57\1\33\1\60\3\33"+
    "\1\61\1\2\1\62\122\0\3\3\115\0\4\63\1\64"+
    "\57\63\1\65\34\63\2\5\1\66\116\5\4\7\1\0"+
    "\57\7\1\67\34\7\17\0\1\33\2\0\5\33\2\0"+
    "\1\70\1\0\10\33\1\71\17\33\4\0\27\33\22\0"+
    "\1\33\1\72\1\0\5\33\4\0\4\33\1\73\23\33"+
    "\4\0\4\33\1\73\22\33\22\0\1\33\1\72\1\0"+
    "\4\21\1\33\4\0\4\33\1\73\23\33\4\0\4\33"+
    "\1\73\22\33\12\0\1\74\11\0\1\74\11\0\30\74"+
    "\4\0\27\74\22\0\1\33\2\0\5\33\4\0\15\33"+
    "\1\75\4\33\1\76\3\33\1\77\1\33\4\0\16\33"+
    "\1\100\3\33\1\101\4\33\22\0\1\33\2\0\5\33"+
    "\4\0\1\102\27\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\1\103\15\33\1\104\11\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\4\33\1\105\11\33"+
    "\1\106\11\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\13\33\1\107\5\33\1\110\5\33\1\111\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\4\33\1\112"+
    "\14\33\1\113\6\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\4\33\1\114\11\33\1\115\11\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\5\33\1\116"+
    "\22\33\4\0\14\33\1\117\12\33\22\0\1\33\2\0"+
    "\5\33\4\0\10\33\1\120\17\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\4\33\1\121\11\33\1\122"+
    "\11\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\16\33\1\123\11\33\4\0\1\33\1\124\25\33\22\0"+
    "\1\33\2\0\5\33\4\0\4\33\1\125\11\33\1\126"+
    "\5\33\1\127\3\33\4\0\1\33\1\130\25\33\22\0"+
    "\1\33\2\0\5\33\4\0\4\33\1\131\17\33\1\132"+
    "\3\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\7\33\1\133\1\134\10\33\1\135\6\33\4\0\10\33"+
    "\1\136\16\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\20\33\1\137\6\33\22\0\1\33\2\0\5\33"+
    "\4\0\4\33\1\140\23\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\12\33\1\141\2\33"+
    "\1\142\11\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\1\33\1\143\13\33\1\144\4\33\1\145\4\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\21\33"+
    "\1\146\5\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\13\33\1\147\1\150\12\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\15\33\1\151\4\33\1\152"+
    "\4\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\4\33\1\153\22\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\17\33\1\154\7\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\1\33\1\155\25\33\3\0"+
    "\4\63\1\156\57\63\1\65\34\63\4\0\1\157\114\0"+
    "\2\63\2\0\115\63\2\7\2\0\115\7\17\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\14\33\1\117\12\33"+
    "\25\0\4\160\110\0\1\161\1\0\1\162\2\0\4\162"+
    "\1\33\4\0\30\33\4\0\27\33\12\0\2\74\3\0"+
    "\1\74\1\0\11\74\1\0\1\74\2\0\30\74\1\0"+
    "\1\74\2\0\27\74\22\0\1\33\2\0\5\33\4\0"+
    "\3\33\1\163\24\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\22\33\1\164\5\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\22\33\1\165\5\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\10\33\1\166\16\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\21\33\1\167\5\33\22\0\1\33\2\0"+
    "\5\33\4\0\21\33\1\170\6\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\21\33\1\171\6\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\13\33\1\172"+
    "\14\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\13\33\1\173\14\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\24\33\1\174\3\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\22\33\1\175\5\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\21\33\1\176"+
    "\6\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\2\33\1\177\25\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\23\33\1\200\4\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\4\33\1\201\23\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\1\202\27\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\22\33"+
    "\1\203\5\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\5\33\1\204\21\33\22\0\1\33"+
    "\2\0\5\33\4\0\1\33\1\205\26\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\22\33\1\206\5\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\1\207"+
    "\27\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\23\33\1\210\4\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\15\33\1\211\12\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\21\33\1\212\6\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\22\33\1\213"+
    "\5\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\23\33\1\214\4\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\20\33\1\215\6\33\22\0"+
    "\1\33\2\0\5\33\4\0\13\33\1\216\14\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\17\33\1\217"+
    "\10\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\4\33\1\220\23\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\13\33\1\221\14\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\10\33\1\222\17\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\13\33\1\223\13\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\4\33\1\224\22\33\22\0\1\33\2\0"+
    "\5\33\4\0\21\33\1\225\6\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\22\33\1\226"+
    "\4\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\22\33\1\227\4\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\12\33\1\230\14\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\17\33\1\231\7\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\14\33\1\232"+
    "\12\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\21\33\1\233\5\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\16\33\1\234\10\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\3\33\1\235\23\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\12\33\1\236"+
    "\14\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\21\33\1\237\5\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\22\33\1\240\4\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\17\33\1\241\7\33\7\0"+
    "\1\242\57\0\1\243\56\0\4\160\11\0\1\244\33\0"+
    "\1\244\47\0\4\161\112\0\1\33\2\0\4\162\1\33"+
    "\4\0\30\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\4\33\1\245\23\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\21\33\1\246\6\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\12\33\1\247\7\33"+
    "\1\250\5\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\7\33\1\251\17\33\22\0\1\33"+
    "\2\0\5\33\4\0\1\252\27\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\16\33\1\253\11\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\4\33\1\254"+
    "\23\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\1\33\1\255\26\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\4\33\1\256\23\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\16\33\1\257\11\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\13\33\1\260"+
    "\14\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\1\261\27\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\3\33\1\262\24\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\23\33\1\263\4\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\10\33"+
    "\1\264\16\33\22\0\1\33\2\0\5\33\4\0\1\265"+
    "\27\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\22\33\1\266\5\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\3\33\1\267\24\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\1\270\26\33"+
    "\22\0\1\33\2\0\5\33\4\0\2\33\1\271\25\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\23\33"+
    "\1\272\4\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\20\33\1\273\6\33\22\0\1\33"+
    "\2\0\5\33\4\0\5\33\1\274\22\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\4\33\1\275\23\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\15\33"+
    "\1\276\12\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\3\33\1\277\24\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\17\33\1\300\10\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\4\33"+
    "\1\301\22\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\17\33\1\302\7\33\22\0\1\33\2\0\5\33"+
    "\4\0\1\33\1\303\26\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\20\33\1\304\6\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\14\33"+
    "\1\305\12\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\20\33\1\306\6\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\2\33\1\307\24\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\16\33\1\310\10\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\15\33"+
    "\1\311\11\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\4\33\1\312\22\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\12\33\1\313\14\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\22\33\1\314\4\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\4\33"+
    "\1\315\22\33\7\0\1\316\177\0\1\317\1\320\51\0"+
    "\1\161\1\0\1\161\2\0\4\161\112\0\1\33\2\0"+
    "\5\33\4\0\21\33\1\321\6\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\4\33\1\322"+
    "\22\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\4\33\1\323\22\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\4\33\1\324\22\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\15\33\1\325\11\33\22\0"+
    "\1\33\2\0\5\33\4\0\23\33\1\326\4\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\15\33\1\327"+
    "\12\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\23\33\1\330\4\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\13\33\1\331\14\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\21\33\1\332\6\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\1\333\27\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\23\33"+
    "\1\334\4\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\14\33\1\335\12\33\22\0\1\33"+
    "\2\0\5\33\4\0\15\33\1\336\12\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\1\337"+
    "\26\33\22\0\1\33\2\0\5\33\4\0\4\33\1\340"+
    "\23\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\4\33\1\341\23\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\24\33\1\342\2\33\22\0"+
    "\1\33\2\0\5\33\4\0\21\33\1\343\6\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\4\33\1\344"+
    "\23\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\13\33\1\345\14\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\15\33\1\346\11\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\14\33\1\347"+
    "\12\33\22\0\1\33\2\0\5\33\4\0\1\350\27\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\21\33\1\351\5\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\21\33\1\352\5\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\4\33\1\353\22\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\21\33"+
    "\1\354\5\33\22\0\1\33\2\0\4\33\1\355\4\0"+
    "\30\33\4\0\20\33\1\356\6\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\17\33\1\357\7\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\17\33\1\360"+
    "\7\33\7\0\1\361\202\0\1\362\32\0\63\157\4\0"+
    "\30\157\1\0\1\157\17\0\1\33\2\0\5\33\4\0"+
    "\23\33\1\363\4\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\6\33\1\364\20\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\25\33\1\365"+
    "\1\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\20\33\1\366\6\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\17\33\1\367\7\33\22\0\1\33\2\0"+
    "\2\33\1\370\1\371\1\33\4\0\30\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\4\33\1\372\23\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\4\33"+
    "\1\373\23\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\14\33\1\374\13\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\4\33\1\375\23\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\10\33"+
    "\1\376\16\33\22\0\1\33\2\0\5\33\4\0\1\377"+
    "\27\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\4\33\1\u0100\16\33\1\u0101\4\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\20\33\1\u0102\7\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\15\33\1\u0103"+
    "\12\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\15\33\1\u0104\11\33\22\0\1\33\2\0"+
    "\5\33\4\0\4\33\1\u0105\23\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\22\33\1\u0106"+
    "\4\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\1\33\1\u0107\25\33\22\0\1\33\2\0\5\33\4\0"+
    "\23\33\1\u0108\4\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\4\33\1\u0109\22\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\10\33\1\u010a"+
    "\16\33\22\0\1\33\1\0\1\u010b\5\33\4\0\30\u010c"+
    "\4\0\27\u010c\22\0\1\33\2\0\4\33\1\355\4\0"+
    "\30\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\21\33\1\u010d\5\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\14\33\1\u010e\12\33\67\0"+
    "\1\u010f\53\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\10\33\1\u0110\16\33\22\0\1\33\2\0\5\33\4\0"+
    "\10\33\1\u0111\11\33\1\u0112\5\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\20\33\1\u0113"+
    "\6\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\10\33\1\u0114\16\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\1\u0115\26\33\22\0\1\33\2\0\5\33"+
    "\4\0\1\u0116\27\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\21\33\1\u0117\6\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\21\33\1\u0118"+
    "\5\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\1\u0119\26\33\22\0\1\33\2\0\5\33\4\0\20\33"+
    "\1\u011a\7\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\7\33\1\u011b\20\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\24\33\1\u011c\3\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\23\33\1\u011d\4\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\17\33\1\u011e\7\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\1\u011f\26\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\21\33\1\u0120\5\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\13\33\1\u0121"+
    "\13\33\22\0\1\33\2\0\5\33\4\0\10\33\1\u0122"+
    "\17\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\17\33\1\u0123\7\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\15\33\1\u0124\11\33\12\0"+
    "\2\u010b\3\0\1\u010b\2\0\10\u010b\3\0\31\u010b\1\0"+
    "\1\u010b\2\0\27\u010b\12\0\2\u010b\3\0\1\u010b\2\0"+
    "\1\u010c\2\u010b\5\u010c\3\0\1\u010b\30\u010c\1\0\1\u010b"+
    "\2\0\27\u010c\70\0\1\157\52\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\15\33\1\u0125\11\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\3\33\1\u0126\23\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\4\33"+
    "\1\u0127\22\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\10\33\1\u0128\16\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\26\33\1\u0129\22\0\1\33\2\0"+
    "\5\33\4\0\1\u012a\1\u012b\2\33\1\u012c\1\33\1\u012d"+
    "\4\33\1\u012e\14\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\23\33\1\u012f\4\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\30\33\4\0\1\u0130\26\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\25\33"+
    "\1\211\1\33\22\0\1\33\2\0\5\33\4\0\7\33"+
    "\1\u0131\20\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\24\33\1\u0132\3\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\1\u0133\27\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\1\u0134\27\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\3\33"+
    "\1\u0135\23\33\22\0\1\33\2\0\5\33\4\0\1\33"+
    "\1\u0136\26\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\4\33\1\u0137\22\33\22\0\1\33"+
    "\2\0\5\33\4\0\14\33\1\u0138\13\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\14\33"+
    "\1\u0139\12\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\14\33\1\u013a\12\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\2\33\1\u013b\24\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\15\33\1\u013c\11\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\1\33"+
    "\1\u013d\25\33\22\0\1\33\2\0\5\33\4\0\15\33"+
    "\1\u013e\12\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\1\u013f\27\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\20\33\1\u0140\7\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\21\33\1\u0141\6\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\4\33\1\u0142"+
    "\23\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\10\33\1\u0143\17\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\4\33\1\u0144\16\33\1\u0145\4\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\16\33\1\u0146"+
    "\11\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\1\u0147\27\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\15\33\1\u0148\12\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\13\33\1\u0149\14\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\1\u014a\27\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\1\u014b\26\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\17\33\1\u014c\7\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\14\33\1\u014d\12\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\21\33\1\u014e\5\33"+
    "\22\0\1\33\2\0\5\33\4\0\3\33\1\u014f\24\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\21\33"+
    "\1\u0150\6\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\24\33\1\u0151\3\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\4\33\1\u0152\23\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\22\33\1\u0153\5\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\16\33"+
    "\1\u0154\11\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\20\33\1\u0155\7\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\7\33\1\u0156\20\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\22\33\1\u0157\5\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\13\33"+
    "\1\u0158\14\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\21\33\1\u0159\6\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\3\33\1\u015a\16\33\1\u015b\5\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\4\33\1\u015c\22\33\22\0\1\33\2\0\5\33"+
    "\4\0\23\33\1\u015d\4\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\10\33\1\u015e\16\33"+
    "\22\0\1\33\2\0\5\33\4\0\1\u015f\27\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\1\u0160\27\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\22\33"+
    "\1\u0161\5\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\15\33\1\u0162\12\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\24\33\1\u0163\3\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\1\u0164\27\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\23\33\1\u0165"+
    "\4\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\1\u0166\26\33\22\0\1\33\2\0\5\33"+
    "\4\0\16\33\1\u0167\11\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\10\33\1\u0168\17\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\30\33\4\0\21\33"+
    "\1\u0169\5\33\22\0\1\33\2\0\5\33\4\0\30\33"+
    "\4\0\15\33\1\u016a\11\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\15\33\1\u016b\11\33\22\0\1\33"+
    "\2\0\5\33\4\0\13\33\1\u016c\14\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\23\33\1\u016d\4\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\1\u016e"+
    "\27\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\15\33\1\u016f\12\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\20\33\1\u0170\7\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\24\33\1\u0171\3\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\15\33\1\u0172"+
    "\12\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\11\33\1\u0173\15\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\14\33\1\u0174\12\33\22\0"+
    "\1\33\2\0\5\33\4\0\4\33\1\u0175\23\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\13\33\1\u0176"+
    "\14\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\24\33\1\u0177\3\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\1\33\1\u0178\26\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\6\33\1\u0179\21\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\30\33\4\0"+
    "\4\33\1\u017a\22\33\22\0\1\33\2\0\5\33\4\0"+
    "\21\33\1\u017b\6\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\16\33\1\u017c\11\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\13\33\1\u017d\14\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\13\33\1\u017e"+
    "\14\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\30\33\4\0\14\33\1\u017f\12\33\22\0\1\33\2\0"+
    "\5\33\4\0\23\33\1\u0180\4\33\4\0\27\33\22\0"+
    "\1\33\2\0\5\33\4\0\4\33\1\u0181\23\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\4\33\1\u0182"+
    "\23\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\4\33\1\u0183\23\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\1\u0184\26\33\22\0\1\33"+
    "\2\0\5\33\4\0\30\33\4\0\1\u0185\26\33\22\0"+
    "\1\33\2\0\5\33\4\0\3\33\1\u0186\24\33\4\0"+
    "\27\33\22\0\1\33\2\0\5\33\4\0\20\33\1\u0187"+
    "\7\33\4\0\27\33\22\0\1\33\2\0\5\33\4\0"+
    "\20\33\1\u0188\7\33\4\0\27\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\1\u0189\26\33\22\0\1\33"+
    "\2\0\5\33\4\0\24\33\1\u018a\3\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\24\33\1\u018b\3\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\22\33"+
    "\1\u018c\5\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\16\33\1\u018d\11\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\16\33\1\u018e\11\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\23\33\1\u018f\4\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\23\33"+
    "\1\u0190\4\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\23\33\1\u0191\4\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\21\33\1\u0192\6\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\4\33\1\u0193\23\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\4\33"+
    "\1\u0194\23\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\10\33\1\u0195\17\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\3\33\1\u0196\24\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\3\33\1\u0197\24\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\15\33"+
    "\1\u0198\12\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\30\33\4\0\1\u0199\26\33\22\0\1\33\2\0"+
    "\5\33\4\0\30\33\4\0\1\u019a\26\33\22\0\1\33"+
    "\2\0\5\33\4\0\6\33\1\u019b\21\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\22\33\1\u019c\5\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\22\33"+
    "\1\u019d\5\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\23\33\1\u019e\4\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\23\33\1\u019f\4\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\21\33\1\u01a0\6\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\21\33"+
    "\1\u01a1\6\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\10\33\1\u01a2\17\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\10\33\1\u01a3\17\33\4\0\27\33"+
    "\22\0\1\33\2\0\5\33\4\0\15\33\1\u01a4\12\33"+
    "\4\0\27\33\22\0\1\33\2\0\5\33\4\0\15\33"+
    "\1\u01a5\12\33\4\0\27\33\22\0\1\33\2\0\5\33"+
    "\4\0\6\33\1\u01a6\21\33\4\0\27\33\22\0\1\33"+
    "\2\0\5\33\4\0\6\33\1\u01a7\21\33\4\0\27\33"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[28107];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\5\11\1\1\2\11"+
    "\2\1\3\11\22\1\2\11\10\1\2\11\2\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\63\1\1\11\1\0"+
    "\62\1\2\0\53\1\2\0\40\1\1\11\1\0\34\1"+
    "\1\0\230\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /* user code: */
  public _EDQLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _EDQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 3:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 86: break;
          case 4:
            { return LINE_COMMENT;
            }
          // fall through
          case 87: break;
          case 5:
            { return DOLLAR;
            }
          // fall through
          case 88: break;
          case 6:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 89: break;
          case 7:
            { return L_PAREN;
            }
          // fall through
          case 90: break;
          case 8:
            { return R_PAREN;
            }
          // fall through
          case 91: break;
          case 9:
            { return ASTERISK;
            }
          // fall through
          case 92: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 93: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 94: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 95: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 96: break;
          case 14:
            { return SLASH;
            }
          // fall through
          case 97: break;
          case 15:
            { return NUMBER;
            }
          // fall through
          case 98: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 99: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 100: break;
          case 18:
            { return EQUAL;
            }
          // fall through
          case 101: break;
          case 19:
            { return IDENTIFIER;
            }
          // fall through
          case 102: break;
          case 20:
            { return L_BRACKET;
            }
          // fall through
          case 103: break;
          case 21:
            { return R_BRACKET;
            }
          // fall through
          case 104: break;
          case 22:
            { return L_CURLY;
            }
          // fall through
          case 105: break;
          case 23:
            { return R_CURLY;
            }
          // fall through
          case 106: break;
          case 24:
            { return MAPPING;
            }
          // fall through
          case 107: break;
          case 25:
            { return QUERY;
            }
          // fall through
          case 108: break;
          case 26:
            { return IF;
            }
          // fall through
          case 109: break;
          case 27:
            { return IN;
            }
          // fall through
          case 110: break;
          case 28:
            { return AND;
            }
          // fall through
          case 111: break;
          case 29:
            { return BAR;
            }
          // fall through
          case 112: break;
          case 30:
            { return GET;
            }
          // fall through
          case 113: break;
          case 31:
            { return PUT;
            }
          // fall through
          case 114: break;
          case 32:
            { return FOR;
            }
          // fall through
          case 115: break;
          case 33:
            { return VAR;
            }
          // fall through
          case 116: break;
          case 34:
            { return ELSE;
            }
          // fall through
          case 117: break;
          case 35:
            { return HEAD;
            }
          // fall through
          case 118: break;
          case 36:
            { return HOST;
            }
          // fall through
          case 119: break;
          case 37:
            { return LOAD;
            }
          // fall through
          case 120: break;
          case 38:
            { return POST;
            }
          // fall through
          case 121: break;
          case 39:
            { return SELF;
            }
          // fall through
          case 122: break;
          case 40:
            { return THEN;
            }
          // fall through
          case 123: break;
          case 41:
            { return NODE;
            }
          // fall through
          case 124: break;
          case 42:
            { return NULL;
            }
          // fall through
          case 125: break;
          case 43:
            { return TRUE;
            }
          // fall through
          case 126: break;
          case 44:
            { return TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 127: break;
          case 45:
            { return CARAT;
            }
          // fall through
          case 128: break;
          case 46:
            { return ERROR;
            }
          // fall through
          case 129: break;
          case 47:
            { return SUPER;
            }
          // fall through
          case 130: break;
          case 48:
            { return TILDE;
            }
          // fall through
          case 131: break;
          case 49:
            { return COUNT;
            }
          // fall through
          case 132: break;
          case 50:
            { return FALSE;
            }
          // fall through
          case 133: break;
          case 51:
            { return ASSERT;
            }
          // fall through
          case 134: break;
          case 52:
            { return COLON2;
            }
          // fall through
          case 135: break;
          case 53:
            { return COLON3;
            }
          // fall through
          case 136: break;
          case 54:
            { return DELETE;
            }
          // fall through
          case 137: break;
          case 55:
            { return HOST_PATH;
            }
          // fall through
          case 138: break;
          case 56:
            { return IMPORT;
            }
          // fall through
          case 139: break;
          case 57:
            { return RETURN;
            }
          // fall through
          case 140: break;
          case 58:
            { return PERCENT;
            }
          // fall through
          case 141: break;
          case 59:
            { return TIMEOUT;
            }
          // fall through
          case 142: break;
          case 60:
            { return CLUSTER;
            }
          // fall through
          case 143: break;
          case 61:
            { return APIKEYID;
            }
          // fall through
          case 144: break;
          case 62:
            { return PASSWORD;
            }
          // fall through
          case 145: break;
          case 63:
            { return USERNAME;
            }
          // fall through
          case 146: break;
          case 64:
            { return FUNCTION;
            }
          // fall through
          case 147: break;
          case 65:
            { return AWSREGION;
            }
          // fall through
          case 148: break;
          case 66:
            { return LESS_THAN;
            }
          // fall through
          case 149: break;
          case 67:
            { return NOT_EQUAL;
            }
          // fall through
          case 150: break;
          case 68:
            { return DOUBLE_AND;
            }
          // fall through
          case 151: break;
          case 69:
            { return DOUBLE_BAR;
            }
          // fall through
          case 152: break;
          case 70:
            { return LESS_EQUAL;
            }
          // fall through
          case 153: break;
          case 71:
            { return DOUBLE_LESS;
            }
          // fall through
          case 154: break;
          case 72:
            { return EXCLAMATION;
            }
          // fall through
          case 155: break;
          case 73:
            { return KIBANA_HOST;
            }
          // fall through
          case 156: break;
          case 74:
            { return APIKEYSECRET;
            }
          // fall through
          case 157: break;
          case 75:
            { return DOUBLE_EQUAL;
            }
          // fall through
          case 158: break;
          case 76:
            { return GREATER_THAN;
            }
          // fall through
          case 159: break;
          case 77:
            { return AUTH;
            }
          // fall through
          case 160: break;
          case 78:
            { return GREATER_EQUAL;
            }
          // fall through
          case 161: break;
          case 79:
            { return DOUBLE_GREATER;
            }
          // fall through
          case 162: break;
          case 80:
            { return APISESSIONTOKEN;
            }
          // fall through
          case 163: break;
          case 81:
            { return TRIPLE_BAR_QUOTED_STRING;
            }
          // fall through
          case 164: break;
          case 82:
            { return VERBATIM_DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 165: break;
          case 83:
            { return VERBATIM_SINGLE_QUOTED_STRING;
            }
          // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
