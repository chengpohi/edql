// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: esql.flex

package com.github.chengpohi.esql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.chengpohi.esql.parser.psi.ESQLPsiTypes.*;
import static com.github.chengpohi.esql.parser.psi.LiteralTokenTypes.*;


public class _ESQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100\1\u5600"+
    "\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00\42\u2000"+
    "\1\u1100\1\u5f00\1\u6000\11\u2000\1\u6100\24\u2000\1\u6200\1\u6300"+
    "\1\u2000\1\u6400\1\u6500\1\u6600\1\u6700\2\u2000\1\u6800\5\u2000"+
    "\1\u6900\1\u6a00\1\u6b00\5\u2000\1\u6c00\1\u6d00\2\u2000\1\u6e00"+
    "\1\u2000\1\u6f00\14\u2000\1\u7000\4\u2000\246\u1100\1\u7100\20\u1100"+
    "\1\u7200\1\u7300\25\u1100\1\u7400\34\u1100\1\u7500\14\u2000\2\u1100"+
    "\1\u7600\5\u2000\23\u1100\1\u7700\u0aec\u2000\1\u7800\1\u7900\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\16\0\4\3\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\26\1\27\1\30\1\31\1\32\1\25"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\3\1\66\1\3\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\3\1\77\1\3\1\100\6\0\1\101"+
    "\32\0\1\1\1\3\4\64\4\3\1\64\2\3\1\0"+
    "\7\3\1\64\4\3\1\64\5\3\27\64\1\3\37\64"+
    "\1\3\70\64\2\43\115\64\1\55\u0142\64\4\3\14\64"+
    "\16\3\5\64\7\3\1\64\1\3\1\64\21\3\160\0"+
    "\5\64\1\3\2\64\2\3\4\64\1\3\1\64\6\3"+
    "\1\64\1\3\3\64\1\3\1\64\1\3\24\64\1\3"+
    "\123\64\1\3\213\64\1\3\5\0\2\3\246\64\1\3"+
    "\46\64\2\3\1\64\6\3\51\64\6\3\1\64\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\64\4\3\4\64\15\3\6\0\5\3"+
    "\1\64\4\3\13\0\1\3\1\0\3\3\53\64\25\0"+
    "\12\102\4\3\2\64\1\0\143\64\1\3\1\64\10\0"+
    "\1\3\6\0\2\64\2\0\1\3\4\0\2\64\12\102"+
    "\3\64\2\3\1\64\17\3\1\0\1\64\1\0\36\64"+
    "\33\0\2\3\131\64\13\0\1\64\16\3\12\102\41\64"+
    "\11\0\2\64\4\3\1\64\2\3\1\0\30\64\4\0"+
    "\1\64\11\0\1\64\3\0\1\64\5\0\22\3\31\64"+
    "\3\0\4\3\13\64\65\3\25\64\1\3\22\64\13\3"+
    "\61\0\66\64\3\0\1\64\22\0\1\64\7\0\12\64"+
    "\2\0\2\3\12\102\1\3\20\64\3\0\1\3\10\64"+
    "\2\3\2\64\2\3\26\64\1\3\7\64\1\3\1\64"+
    "\3\3\4\64\2\3\1\0\1\64\7\0\2\3\2\0"+
    "\2\3\3\0\1\64\10\3\1\0\4\3\2\64\1\3"+
    "\3\64\2\0\2\3\12\102\4\64\7\3\2\64\1\3"+
    "\1\0\2\3\3\0\1\3\6\64\4\3\2\64\2\3"+
    "\26\64\1\3\7\64\1\3\2\64\1\3\2\64\1\3"+
    "\2\64\2\3\1\0\1\3\5\0\4\3\2\0\2\3"+
    "\3\0\3\3\1\0\7\3\4\64\1\3\1\64\7\3"+
    "\12\102\2\0\3\64\1\0\13\3\3\0\1\3\11\64"+
    "\1\3\3\64\1\3\26\64\1\3\7\64\1\3\2\64"+
    "\1\3\5\64\2\3\1\0\1\64\10\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\64\17\3\2\64\2\0\2\3"+
    "\12\102\1\3\1\64\7\3\1\64\6\0\1\3\3\0"+
    "\1\3\10\64\2\3\2\64\2\3\26\64\1\3\7\64"+
    "\1\3\2\64\1\3\5\64\2\3\1\0\1\64\7\0"+
    "\2\3\2\0\2\3\3\0\7\3\3\0\4\3\2\64"+
    "\1\3\3\64\2\0\2\3\12\102\1\3\1\64\20\3"+
    "\1\0\1\64\1\3\6\64\3\3\3\64\1\3\4\64"+
    "\3\3\2\64\1\3\1\64\1\3\2\64\3\3\2\64"+
    "\3\3\3\64\3\3\14\64\4\3\5\0\3\3\3\0"+
    "\1\3\4\0\2\3\1\64\6\3\1\0\16\3\12\102"+
    "\11\3\1\64\6\3\5\0\10\64\1\3\3\64\1\3"+
    "\27\64\1\3\20\64\3\3\1\64\7\0\1\3\3\0"+
    "\1\3\4\0\7\3\2\0\1\3\3\64\5\3\2\64"+
    "\2\0\2\3\12\102\20\3\1\64\3\0\1\3\10\64"+
    "\1\3\3\64\1\3\27\64\1\3\12\64\1\3\5\64"+
    "\2\3\1\0\1\64\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\7\3\1\64\1\3\2\64\2\0\2\3"+
    "\12\102\1\3\2\64\15\3\4\0\11\64\1\3\3\64"+
    "\1\3\51\64\2\0\1\64\7\0\1\3\3\0\1\3"+
    "\4\0\1\64\5\3\3\64\1\0\7\3\3\64\2\0"+
    "\2\3\12\102\12\3\6\64\1\3\3\0\1\3\22\64"+
    "\3\3\30\64\1\3\11\64\1\3\1\64\2\3\7\64"+
    "\3\3\1\0\4\3\6\0\1\3\1\0\1\3\10\0"+
    "\6\3\12\102\2\3\2\0\15\3\60\64\1\0\2\64"+
    "\7\0\4\3\10\64\10\0\1\3\12\102\47\3\2\64"+
    "\1\3\1\64\1\3\5\64\1\3\30\64\1\3\1\64"+
    "\1\3\12\64\1\0\2\64\11\0\1\64\2\3\5\64"+
    "\1\3\1\64\1\3\6\0\2\3\12\102\2\3\4\64"+
    "\40\3\1\64\27\3\2\0\6\3\12\102\13\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\2\0\10\64\1\3"+
    "\44\64\4\3\24\0\1\3\2\0\5\64\13\0\1\3"+
    "\44\0\11\3\1\0\71\3\53\64\24\0\1\64\12\102"+
    "\6\3\6\64\4\0\4\64\3\0\1\64\3\0\2\64"+
    "\7\0\3\64\4\0\15\64\14\0\1\64\1\0\12\102"+
    "\4\0\2\3\46\64\1\3\1\64\5\3\1\64\2\3"+
    "\53\64\1\3\u014d\64\1\3\4\64\2\3\7\64\1\3"+
    "\1\64\1\3\4\64\2\3\51\64\1\3\4\64\2\3"+
    "\41\64\1\3\4\64\2\3\7\64\1\3\1\64\1\3"+
    "\4\64\2\3\17\64\1\3\71\64\1\3\4\64\2\3"+
    "\103\64\2\3\3\0\40\3\20\64\20\3\126\64\2\3"+
    "\6\64\3\3\u016c\64\2\3\21\64\1\1\32\64\5\3"+
    "\113\64\3\3\13\64\7\3\15\64\1\3\4\64\3\0"+
    "\13\3\22\64\3\0\13\3\22\64\2\0\14\3\15\64"+
    "\1\3\3\64\1\3\2\0\14\3\64\64\40\0\3\3"+
    "\1\64\3\3\2\64\1\0\2\3\12\102\41\3\4\0"+
    "\1\3\12\102\6\3\131\64\7\3\5\64\2\0\42\64"+
    "\1\0\1\64\5\3\106\64\12\3\37\64\1\3\14\0"+
    "\4\3\14\0\12\3\12\102\36\64\2\3\5\64\13\3"+
    "\54\64\4\3\32\64\6\3\12\102\46\3\27\64\5\0"+
    "\4\3\65\64\12\0\1\3\35\0\2\3\1\0\12\102"+
    "\6\3\12\102\15\3\1\64\10\3\16\0\1\3\2\0"+
    "\77\3\5\0\57\64\21\0\7\64\4\3\12\102\21\3"+
    "\11\0\14\3\3\0\36\64\15\0\2\64\12\102\54\64"+
    "\16\0\14\3\44\64\24\0\10\3\12\102\3\3\3\64"+
    "\12\102\44\64\2\3\11\64\7\3\53\64\2\3\3\64"+
    "\20\3\3\0\1\3\25\0\4\64\1\0\6\64\1\0"+
    "\2\64\3\0\1\64\5\3\300\64\72\0\1\3\5\0"+
    "\26\64\2\3\6\64\2\3\46\64\2\3\6\64\2\3"+
    "\10\64\1\3\1\64\1\3\1\64\1\3\1\64\1\3"+
    "\37\64\2\3\65\64\1\3\7\64\1\3\1\64\3\3"+
    "\3\64\1\3\7\64\3\3\4\64\2\3\6\64\4\3"+
    "\15\64\5\3\3\64\1\3\7\64\3\3\13\1\5\0"+
    "\30\3\2\1\5\0\1\1\17\3\2\64\23\3\1\64"+
    "\12\3\1\1\5\0\1\3\12\0\1\3\1\64\15\3"+
    "\1\64\20\3\15\64\3\3\40\64\20\3\15\0\4\3"+
    "\1\0\3\3\14\0\21\3\1\64\4\3\1\64\2\3"+
    "\12\64\1\3\1\64\3\3\5\64\6\3\1\64\1\3"+
    "\1\64\1\3\1\64\1\3\1\45\3\64\1\3\13\64"+
    "\2\3\4\64\5\3\5\64\4\3\1\64\21\3\51\64"+
    "\u0177\3\57\64\1\3\57\64\1\3\205\64\6\3\4\64"+
    "\3\0\2\64\14\3\46\64\1\3\1\64\5\3\1\64"+
    "\2\3\70\64\7\3\1\64\17\3\1\0\27\64\11\3"+
    "\7\64\1\3\7\64\1\3\7\64\1\3\7\64\1\3"+
    "\7\64\1\3\7\64\1\3\7\64\1\3\7\64\1\3"+
    "\40\0\57\3\1\64\320\3\1\1\4\3\3\64\31\3"+
    "\11\64\6\0\1\3\5\64\2\3\5\64\4\3\126\64"+
    "\2\3\2\0\2\3\3\64\1\3\132\64\1\3\4\64"+
    "\5\3\53\64\1\3\136\64\21\3\40\64\60\3\320\64"+
    "\100\3\375\64\3\3\215\64\103\3\56\64\2\3\15\64"+
    "\3\3\20\64\12\102\2\64\24\3\57\64\1\0\4\3"+
    "\12\0\1\3\37\64\2\0\120\64\2\0\45\3\11\64"+
    "\2\3\147\64\2\3\65\64\2\3\11\64\52\3\15\64"+
    "\1\0\3\64\1\0\4\64\1\0\27\64\5\0\4\3"+
    "\1\0\13\3\1\64\7\3\64\64\14\3\2\0\62\64"+
    "\22\0\12\3\12\102\6\3\22\0\6\64\3\3\1\64"+
    "\1\3\2\64\1\0\12\102\34\64\10\0\2\3\27\64"+
    "\15\0\14\3\35\64\3\3\4\0\57\64\16\0\16\3"+
    "\1\64\12\102\6\3\5\64\1\0\12\64\12\102\5\64"+
    "\1\3\51\64\16\0\11\3\3\64\1\0\10\64\2\0"+
    "\2\3\12\102\6\3\27\64\3\3\1\64\3\0\62\64"+
    "\1\0\1\64\3\0\2\64\2\0\5\64\2\0\1\64"+
    "\1\0\1\64\30\3\3\64\2\3\13\64\5\0\2\3"+
    "\3\64\2\0\12\3\6\64\2\3\6\64\2\3\6\64"+
    "\11\3\7\64\1\3\7\64\1\3\53\64\1\3\16\64"+
    "\6\3\163\64\10\0\1\3\2\0\2\3\12\102\6\3"+
    "\244\64\14\3\27\64\4\3\61\64\4\3\156\64\2\3"+
    "\152\64\46\3\7\64\14\3\5\64\5\3\1\64\1\0"+
    "\12\64\1\3\15\64\1\3\5\64\1\3\1\64\1\3"+
    "\2\64\1\3\2\64\1\3\154\64\41\3\153\64\22\3"+
    "\100\64\2\3\66\64\50\3\15\64\3\3\20\0\20\3"+
    "\20\0\3\3\2\64\30\3\3\64\31\3\1\64\6\3"+
    "\5\64\1\3\207\64\2\3\1\0\4\3\1\64\13\3"+
    "\12\102\7\3\32\64\4\3\1\64\1\3\32\64\13\3"+
    "\131\64\3\3\6\64\2\3\6\64\2\3\6\64\2\3"+
    "\3\64\3\3\2\64\3\3\2\64\22\3\3\0\4\3"+
    "\14\64\1\3\32\64\1\3\23\64\1\3\2\64\1\3"+
    "\17\64\2\3\16\64\42\3\173\64\105\3\65\64\210\3"+
    "\1\0\202\3\35\64\3\3\61\64\17\3\1\0\37\3"+
    "\40\64\15\3\36\64\5\3\46\64\5\0\5\3\36\64"+
    "\2\3\44\64\4\3\10\64\1\3\5\64\52\3\236\64"+
    "\2\3\12\102\6\3\44\64\4\3\44\64\4\3\50\64"+
    "\10\3\64\64\234\3\67\64\11\3\26\64\12\3\10\64"+
    "\230\3\6\64\2\3\1\64\1\3\54\64\1\3\2\64"+
    "\3\3\1\64\2\3\27\64\12\3\27\64\11\3\37\64"+
    "\101\3\23\64\1\3\2\64\12\3\26\64\12\3\32\64"+
    "\106\3\70\64\6\3\2\64\100\3\1\64\3\0\1\3"+
    "\2\0\5\3\4\0\4\64\1\3\3\64\1\3\35\64"+
    "\2\3\3\0\4\3\1\0\40\3\35\64\3\3\35\64"+
    "\43\3\10\64\1\3\34\64\2\0\31\3\66\64\12\3"+
    "\26\64\12\3\23\64\15\3\22\64\156\3\111\64\67\3"+
    "\63\64\15\3\63\64\15\3\44\64\4\0\10\3\12\102"+
    "\u0146\3\52\64\1\3\2\0\3\3\2\64\116\3\35\64"+
    "\12\3\1\64\10\3\26\64\13\0\137\3\25\64\33\3"+
    "\27\64\11\3\3\0\65\64\17\0\37\3\12\102\17\3"+
    "\4\0\55\64\13\0\2\3\1\0\17\3\1\0\2\3"+
    "\31\64\7\3\12\102\6\3\3\0\44\64\16\0\1\3"+
    "\12\102\4\3\1\64\2\0\1\64\10\3\43\64\1\0"+
    "\2\3\1\64\11\3\3\0\60\64\16\0\4\64\4\3"+
    "\4\0\1\3\2\0\12\102\1\64\1\3\1\64\43\3"+
    "\22\64\1\3\31\64\14\0\6\3\1\0\101\3\7\64"+
    "\1\3\1\64\1\3\4\64\1\3\17\64\1\3\12\64"+
    "\7\3\57\64\14\0\5\3\12\102\6\3\4\0\1\3"+
    "\10\64\2\3\2\64\2\3\26\64\1\3\7\64\1\3"+
    "\2\64\1\3\5\64\1\3\2\0\1\64\7\0\2\3"+
    "\2\0\2\3\3\0\2\3\1\64\6\3\1\0\5\3"+
    "\5\64\2\0\2\3\7\0\3\3\5\0\213\3\65\64"+
    "\22\0\4\64\5\3\12\102\4\3\1\0\3\64\36\3"+
    "\60\64\24\0\2\64\1\3\1\64\10\3\12\102\246\3"+
    "\57\64\7\0\2\3\11\0\27\3\4\64\2\0\42\3"+
    "\60\64\21\0\3\3\1\64\13\3\12\102\46\3\53\64"+
    "\15\0\1\64\7\3\12\102\66\3\33\64\2\3\17\0"+
    "\4\3\12\102\306\3\54\64\17\0\145\3\100\64\12\102"+
    "\25\3\10\64\2\3\1\64\2\3\10\64\1\3\2\64"+
    "\1\3\30\64\6\0\1\3\2\0\2\3\4\0\1\64"+
    "\1\0\1\64\2\0\14\3\12\0\106\3\10\64\2\3"+
    "\47\64\7\0\2\3\7\0\1\64\1\3\1\64\1\0"+
    "\33\3\1\64\12\0\50\64\7\0\1\64\4\0\10\3"+
    "\1\0\10\3\1\64\13\0\56\64\20\0\3\3\1\64"+
    "\42\3\71\64\7\3\11\64\1\3\45\64\10\0\1\3"+
    "\10\0\1\64\17\3\12\102\30\3\36\64\2\3\26\0"+
    "\1\3\16\0\111\3\7\64\1\3\2\64\1\3\46\64"+
    "\6\0\3\3\1\0\1\3\2\0\1\3\7\0\1\64"+
    "\1\0\10\3\12\102\6\3\6\64\1\3\2\64\1\3"+
    "\40\64\5\0\1\3\2\0\1\3\5\0\1\64\7\3"+
    "\12\102\u0136\3\23\64\4\0\271\3\1\64\54\3\4\64"+
    "\37\3\232\64\146\3\157\64\21\3\304\64\274\3\57\64"+
    "\1\3\11\0\307\3\107\64\271\3\71\64\7\3\37\64"+
    "\1\3\12\102\146\3\36\64\2\3\5\0\13\3\60\64"+
    "\7\0\11\3\4\64\14\3\12\102\11\3\25\64\5\3"+
    "\23\64\260\3\100\64\200\3\113\64\4\3\1\0\1\64"+
    "\67\0\7\3\4\0\15\64\100\3\2\64\1\3\1\64"+
    "\1\0\13\3\2\0\16\3\370\64\10\3\326\64\52\3"+
    "\11\64\367\3\37\64\61\3\3\64\21\3\4\64\10\3"+
    "\u018c\64\4\3\153\64\5\3\15\64\3\3\11\64\7\3"+
    "\12\64\3\3\2\0\1\3\4\0\301\3\5\0\3\3"+
    "\26\0\2\3\7\0\36\3\4\0\224\3\3\0\273\3"+
    "\125\64\1\3\107\64\1\3\2\64\2\3\1\64\2\3"+
    "\2\64\2\3\4\64\1\3\14\64\1\3\1\64\1\3"+
    "\7\64\1\3\101\64\1\3\4\64\2\3\10\64\1\3"+
    "\7\64\1\3\34\64\1\3\4\64\1\3\5\64\1\3"+
    "\1\64\3\3\7\64\1\3\u0154\64\2\3\31\64\1\3"+
    "\31\64\1\3\37\64\1\3\31\64\1\3\37\64\1\3"+
    "\31\64\1\3\37\64\1\3\31\64\1\3\37\64\1\3"+
    "\31\64\1\3\10\64\2\3\62\102\67\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\325\3\55\64\3\3\7\0\7\64\2\3"+
    "\12\102\4\3\1\64\u0171\3\54\64\4\0\12\102\5\3"+
    "\306\64\13\3\7\0\51\3\104\64\7\0\1\64\4\3"+
    "\12\102\u0156\3\1\64\117\3\4\64\1\3\33\64\1\3"+
    "\2\64\1\3\1\64\2\3\1\64\1\3\12\64\1\3"+
    "\4\64\1\3\1\64\1\3\1\64\6\3\1\64\4\3"+
    "\1\64\1\3\1\64\1\3\1\64\1\3\3\64\1\3"+
    "\2\64\1\3\1\64\2\3\1\64\1\3\1\64\1\3"+
    "\1\64\1\3\1\64\1\3\1\64\1\3\2\64\1\3"+
    "\1\64\2\3\4\64\1\3\7\64\1\3\4\64\1\3"+
    "\4\64\1\3\1\64\1\3\12\64\1\3\21\64\5\3"+
    "\3\64\1\3\5\64\1\3\21\64\u0134\3\12\0\6\3"+
    "\336\64\42\3\65\64\13\3\336\64\2\3\u0182\64\16\3"+
    "\u0131\64\37\3\36\64\342\3\113\64\266\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
    "\30\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\26\1\37\1\20\2\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\3\26\1\46\1\26\1\47\21\26"+
    "\1\50\1\51\10\26\1\52\1\53\17\26\1\54\1\55"+
    "\1\56\1\26\1\37\1\0\2\20\1\26\1\57\1\60"+
    "\1\61\11\26\1\62\26\26\1\63\24\26\1\0\1\37"+
    "\2\26\1\64\1\65\4\26\1\66\1\26\1\67\4\26"+
    "\1\70\1\71\1\72\1\73\10\26\1\74\1\75\1\76"+
    "\4\26\1\77\3\26\1\100\10\26\1\101\4\26\1\102"+
    "\1\26\1\103\1\104\2\26\1\105\7\26\1\106\3\26"+
    "\1\107\3\26\1\110\1\111\3\26\1\112\1\113\1\114"+
    "\1\115\3\26\1\116\2\26\1\117\1\26\1\120\1\26"+
    "\1\121\3\26\1\122\1\26\1\123\1\124\1\125\1\26"+
    "\1\126\1\127\1\26\1\130\1\26\1\131\2\26\1\132"+
    "\1\26\1\133\2\26\1\134\1\135\1\136\1\137\1\140"+
    "\2\26\1\141\1\142\1\26\1\143\1\144\1\26\1\145"+
    "\2\26\1\146\2\26\1\147\2\26\1\150\1\151\4\26"+
    "\1\152\1\153\4\26\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\103"+
    "\0\103\0\u01d5\0\103\0\103\0\103\0\103\0\103\0\u0218"+
    "\0\u025b\0\u029e\0\u02e1\0\u0324\0\103\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0218\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\103\0\103\0\u0b41\0\u0192"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0218\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u0218\0\u1576\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\103\0\u19a6"+
    "\0\103\0\u19e9\0\u1a2c\0\u1a6f\0\u1a6f\0\u0cd3\0\u1ab2\0\u0218"+
    "\0\u0218\0\u0218\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u1c87\0\u1cca\0\u1d0d\0\u0218\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461"+
    "\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u1a2c"+
    "\0\103\0\u2891\0\u28d4\0\u0218\0\u0218\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u0218\0\u2a23\0\u0218\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u0218\0\u0218\0\u0218\0\u0218\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u0218\0\u0218\0\u0218\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u0218\0\u2e96\0\u2ed9\0\u2f1c\0\u0218"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134"+
    "\0\u0218\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u0218\0\u3283\0\u0218"+
    "\0\u0218\0\u32c6\0\u3309\0\u0218\0\u334c\0\u338f\0\u33d2\0\u3415"+
    "\0\u3458\0\u349b\0\u34de\0\u0218\0\u3521\0\u3564\0\u35a7\0\u0218"+
    "\0\u35ea\0\u362d\0\u3670\0\u0218\0\u0218\0\u36b3\0\u36f6\0\u3739"+
    "\0\u0218\0\u0218\0\u0218\0\u0218\0\u377c\0\u37bf\0\u3802\0\u0218"+
    "\0\u3845\0\u3888\0\u0218\0\u38cb\0\u0218\0\u390e\0\u0218\0\u3951"+
    "\0\u3994\0\u39d7\0\u0218\0\u3a1a\0\u0218\0\u0218\0\u0218\0\u3a5d"+
    "\0\u0218\0\u0218\0\u3aa0\0\u0218\0\u3ae3\0\u0218\0\u3b26\0\u3b69"+
    "\0\u0218\0\u3bac\0\u0218\0\u3bef\0\u3c32\0\u0218\0\u0218\0\u0218"+
    "\0\u0218\0\u0218\0\u3c75\0\u3cb8\0\u0218\0\u0218\0\u3cfb\0\u0218"+
    "\0\u0218\0\u3d3e\0\u0218\0\u3d81\0\u3dc4\0\u0218\0\u3e07\0\u3e4a"+
    "\0\u0218\0\u3e8d\0\u3ed0\0\u0218\0\u0218\0\u3f13\0\u3f56\0\u3f99"+
    "\0\u3fdc\0\u0218\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u0218";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\7\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\2\44\1\62\1\2\1\44\1\63\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\64\1\65\1\3"+
    "\1\2\104\0\2\3\76\0\1\3\31\0\1\66\52\0"+
    "\5\5\1\67\75\5\2\6\1\0\100\6\1\70\6\0"+
    "\1\70\13\0\2\70\6\0\32\70\2\0\1\70\1\0"+
    "\6\70\2\0\2\70\12\12\1\71\70\12\1\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\32\44\2\0"+
    "\1\44\1\0\6\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\72\6\0\32\44\2\0\1\44\1\0"+
    "\6\44\2\0\2\44\15\0\1\73\106\0\1\74\1\0"+
    "\2\24\12\0\1\75\22\0\1\76\12\0\1\75\26\0"+
    "\1\74\1\0\2\24\12\0\1\75\35\0\1\75\34\0"+
    "\1\77\1\100\1\101\101\0\1\102\102\0\1\103\1\104"+
    "\74\0\2\31\55\0\1\31\1\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\1\44\1\105\11\44\1\106"+
    "\1\44\1\107\4\44\1\110\7\44\2\0\1\44\1\0"+
    "\1\44\1\105\4\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\4\44\1\111\23\44\1\112"+
    "\1\44\2\0\1\44\1\0\4\44\1\111\1\44\2\0"+
    "\3\44\6\0\1\44\10\0\2\44\1\0\2\44\6\0"+
    "\1\113\15\44\1\114\2\44\1\115\2\44\1\116\5\44"+
    "\2\0\1\44\1\0\1\113\5\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\4\44\1\117"+
    "\3\44\1\120\21\44\2\0\1\44\1\0\4\44\1\117"+
    "\1\44\2\0\3\44\6\0\1\44\10\0\2\44\1\0"+
    "\2\44\6\0\13\44\1\121\1\44\1\122\4\44\1\123"+
    "\4\44\1\124\2\44\2\0\1\44\1\0\6\44\2\0"+
    "\3\44\6\0\1\44\10\0\2\44\1\0\2\44\6\0"+
    "\1\125\20\44\1\126\2\44\1\127\5\44\2\0\1\44"+
    "\1\0\1\125\5\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\13\44\1\130\5\44\1\131"+
    "\10\44\2\0\1\44\1\0\6\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\1\132\31\44"+
    "\2\0\1\44\1\0\1\132\5\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\6\44\1\133"+
    "\6\44\1\134\4\44\1\135\7\44\2\0\1\44\1\0"+
    "\6\44\2\0\3\44\6\0\1\44\10\0\2\44\1\0"+
    "\2\44\6\0\16\44\1\136\13\44\2\0\1\44\1\0"+
    "\6\44\2\0\3\44\6\0\1\44\10\0\2\44\1\0"+
    "\2\44\6\0\4\44\1\137\3\44\1\140\21\44\2\0"+
    "\1\44\1\0\4\44\1\137\1\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\1\141\31\44"+
    "\2\0\1\44\1\0\1\141\5\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\1\142\15\44"+
    "\1\143\5\44\1\144\5\44\2\0\1\44\1\0\1\142"+
    "\5\44\2\0\3\44\6\0\1\44\10\0\2\44\1\0"+
    "\2\44\6\0\5\44\1\145\7\44\1\146\3\44\1\147"+
    "\2\44\1\150\5\44\2\0\1\44\1\0\5\44\1\145"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\13\44\1\151\16\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\24\44\1\152\5\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\1\153\3\44\1\154\3\44\1\155\5\44\1\156"+
    "\13\44\2\0\1\44\1\0\1\153\3\44\1\154\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\157\25\44\2\0\1\44\1\0\4\44"+
    "\1\157\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\7\44\1\160\22\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\15\44\1\161\1\44\1\162\2\44"+
    "\1\163\7\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\1\164"+
    "\31\44\2\0\1\44\1\0\1\164\5\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\7\44"+
    "\1\165\1\166\21\44\2\0\1\44\1\0\6\44\2\0"+
    "\3\44\4\0\1\5\1\0\1\44\2\0\1\12\5\0"+
    "\2\44\1\0\2\44\6\0\32\44\2\0\1\44\1\0"+
    "\6\44\2\0\2\44\66\62\1\167\14\62\70\63\1\170"+
    "\12\63\77\0\1\171\10\0\1\5\107\0\1\12\70\0"+
    "\1\44\6\0\1\44\10\0\2\44\1\0\2\72\6\0"+
    "\4\44\1\172\25\44\2\0\1\44\1\0\4\44\1\172"+
    "\1\44\2\0\2\44\15\73\1\173\65\73\23\0\2\74"+
    "\12\0\1\75\35\0\1\75\23\0\1\174\1\0\1\174"+
    "\2\0\2\175\101\0\2\176\44\0\6\176\4\0\1\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\16\44"+
    "\1\177\13\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\13\44"+
    "\1\200\16\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\3\44"+
    "\1\201\26\44\2\0\1\44\1\0\3\44\1\201\2\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\2\44\1\202\27\44\2\0\1\44\1\0\2\44"+
    "\1\202\3\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\23\44\1\203\6\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\22\44\1\204\7\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\13\44\1\205\16\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\16\44\1\206\13\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\21\44\1\207\10\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\13\44\1\210\6\44\1\211\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\22\44\1\212\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\22\44\1\213\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\3\44\1\214\26\44"+
    "\2\0\1\44\1\0\3\44\1\214\2\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\2\44"+
    "\1\215\27\44\2\0\1\44\1\0\2\44\1\215\3\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\2\44\1\216\5\44\1\217\6\44\1\220\12\44"+
    "\2\0\1\44\1\0\2\44\1\216\3\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\10\44"+
    "\1\221\21\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\16\44"+
    "\1\222\13\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\13\44"+
    "\1\223\16\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\16\44"+
    "\1\224\13\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\16\44"+
    "\1\225\13\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\25\44"+
    "\1\226\4\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\15\44"+
    "\1\227\14\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\3\44"+
    "\1\230\11\44\1\231\4\44\1\232\1\233\6\44\2\0"+
    "\1\44\1\0\3\44\1\230\2\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\15\44\1\234"+
    "\14\44\2\0\1\44\1\0\6\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\10\44\1\235"+
    "\21\44\2\0\1\44\1\0\6\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\5\44\1\236"+
    "\24\44\2\0\1\44\1\0\5\44\1\236\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\12\44"+
    "\1\237\1\44\1\240\15\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\23\44\1\241\6\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\23\44\1\242\6\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\23\44\1\243\6\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\13\44\1\244\16\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\5\44\1\245\24\44\2\0\1\44\1\0\5\44"+
    "\1\245\2\0\3\44\6\0\1\44\10\0\2\44\1\0"+
    "\2\44\6\0\3\44\1\246\26\44\2\0\1\44\1\0"+
    "\3\44\1\246\2\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\23\44\1\247\6\44\2\0"+
    "\1\44\1\0\6\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\1\250\31\44\2\0\1\44"+
    "\1\0\1\250\5\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\4\44\1\251\25\44\2\0"+
    "\1\44\1\0\4\44\1\251\1\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\10\44\1\252"+
    "\21\44\2\0\1\44\1\0\6\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\2\44\1\253"+
    "\3\44\1\254\10\44\1\255\12\44\2\0\1\44\1\0"+
    "\2\44\1\253\3\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\6\44\1\256\23\44\2\0"+
    "\1\44\1\0\6\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\13\44\1\257\16\44\2\0"+
    "\1\44\1\0\6\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\13\44\1\260\16\44\2\0"+
    "\1\44\1\0\6\44\2\0\3\44\6\0\1\44\10\0"+
    "\2\44\1\0\2\44\6\0\4\44\1\261\25\44\2\0"+
    "\1\44\1\0\4\44\1\261\1\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\10\44\1\262"+
    "\21\44\2\0\1\44\1\0\6\44\2\0\3\44\6\0"+
    "\1\44\10\0\2\44\1\0\2\44\6\0\3\44\1\263"+
    "\26\44\2\0\1\44\1\0\3\44\1\263\2\44\2\0"+
    "\3\44\6\0\1\44\10\0\2\44\1\0\2\44\6\0"+
    "\10\44\1\264\21\44\2\0\1\44\1\0\6\44\2\0"+
    "\3\44\6\0\1\44\10\0\2\44\1\0\2\44\6\0"+
    "\13\44\1\265\16\44\2\0\1\44\1\0\6\44\2\0"+
    "\3\44\6\0\1\44\10\0\2\44\1\0\2\44\6\0"+
    "\4\44\1\266\25\44\2\0\1\44\1\0\4\44\1\266"+
    "\1\44\2\0\3\44\6\0\1\44\10\0\2\44\1\0"+
    "\2\44\6\0\23\44\1\267\6\44\2\0\1\44\1\0"+
    "\6\44\2\0\2\44\70\0\1\63\12\0\1\44\6\0"+
    "\1\44\6\0\1\174\1\0\2\44\1\0\2\44\6\0"+
    "\32\44\2\0\1\44\1\0\6\44\2\0\2\44\15\73"+
    "\1\270\4\73\1\271\60\73\23\0\2\175\56\0\1\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\21\44"+
    "\1\272\10\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\26\44"+
    "\1\273\3\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\274\16\44\1\275\6\44\2\0\1\44\1\0\4\44"+
    "\1\274\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\13\44\1\276\16\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\22\44\1\277\7\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\21\44\1\300\10\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\301\25\44\2\0\1\44"+
    "\1\0\4\44\1\301\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\2\44\1\302\27\44"+
    "\2\0\1\44\1\0\2\44\1\302\3\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\303\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\304\25\44\2\0\1\44\1\0\4\44\1\304\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\1\305\31\44\2\0\1\44\1\0\1\305\5\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\306\25\44\2\0\1\44\1\0\4\44"+
    "\1\306\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\22\44\1\307\7\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\13\44\1\310\16\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\13\44\1\311\16\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\14\44\1\312\15\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\13\44\1\313\16\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\1\44\1\314\30\44\2\0\1\44"+
    "\1\0\1\44\1\314\4\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\24\44\1\315\5\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\10\44\1\316\21\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\16\44\1\317\13\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\4\44\1\320\25\44"+
    "\2\0\1\44\1\0\4\44\1\320\1\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\321\25\44\2\0\1\44\1\0\4\44\1\321\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\322\25\44\2\0\1\44\1\0\4\44"+
    "\1\322\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\323\25\44\2\0\1\44"+
    "\1\0\4\44\1\323\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\24\44\1\324\5\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\15\44\1\325\14\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\23\44\1\326\6\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\4\44\1\327\25\44"+
    "\2\0\1\44\1\0\4\44\1\327\1\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\10\44"+
    "\1\330\21\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\2\44"+
    "\1\331\27\44\2\0\1\44\1\0\2\44\1\331\3\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\24\44\1\332\5\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\15\44\1\333\14\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\13\44\1\334\16\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\22\44\1\335\7\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\336\25\44\2\0\1\44\1\0\4\44"+
    "\1\336\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\337\25\44\2\0\1\44"+
    "\1\0\4\44\1\337\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\15\44\1\340\14\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\21\44\1\341\10\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\22\44\1\342\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\24\44\1\343\5\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\4\44\1\344\25\44"+
    "\2\0\1\44\1\0\4\44\1\344\1\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\13\44"+
    "\1\345\16\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\7\44"+
    "\1\346\22\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\13\44"+
    "\1\347\16\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\350\25\44\2\0\1\44\1\0\4\44\1\350\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\15\44\1\351\14\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\16\44\1\352\13\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\1\353\31\44\2\0\1\44\1\0\1\353\5\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\15\44\1\354\14\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\24\44\1\355\5\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\15\44\1\356\3\44\1\357\10\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\7\44\1\360\22\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\23\44\1\361\6\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\362\25\44\2\0\1\44"+
    "\1\0\4\44\1\362\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\1\363\31\44\2\0"+
    "\1\44\1\0\1\363\5\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\22\44\1\364\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\4\44\1\365\25\44"+
    "\2\0\1\44\1\0\4\44\1\365\1\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\366\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\10\44"+
    "\1\367\21\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\17\44"+
    "\1\370\12\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\17\44"+
    "\1\371\12\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\372\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\1\373"+
    "\31\44\2\0\1\44\1\0\1\373\5\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\17\44"+
    "\1\374\12\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\15\44"+
    "\1\375\14\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\21\44"+
    "\1\376\10\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\27\44"+
    "\1\377\2\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\21\44"+
    "\1\u0100\10\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\21\44"+
    "\1\u0101\10\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\21\44"+
    "\1\u0102\10\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\13\44"+
    "\1\u0103\16\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\u0104\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\7\44"+
    "\1\u0105\22\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\21\44"+
    "\1\u0106\10\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\24\44"+
    "\1\u0107\5\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\u0108\25\44\2\0\1\44\1\0\4\44\1\u0108\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\21\44\1\u0109\10\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\21\44\1\u010a\10\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\30\44\1\u010b\1\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\u010c\25\44\2\0\1\44\1\0\4\44"+
    "\1\u010c\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\21\44\1\u010d\10\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\27\44\1\u010e\2\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\1\u010f\31\44\2\0\1\44\1\0"+
    "\1\u010f\5\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\23\44\1\u0110\6\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\1\44\1\u0111\30\44\2\0\1\44"+
    "\1\0\1\44\1\u0111\4\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\2\44\1\u0112\27\44"+
    "\2\0\1\44\1\0\2\44\1\u0112\3\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\15\44"+
    "\1\u0113\14\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\u0114\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\6\44"+
    "\1\u0115\23\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\u0116\25\44\2\0\1\44\1\0\4\44\1\u0116\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\u0117\25\44\2\0\1\44\1\0\4\44"+
    "\1\u0117\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\u0118\25\44\2\0\1\44"+
    "\1\0\4\44\1\u0118\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\23\44\1\u0119\6\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\15\44\1\u011a\14\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\4\44\1\u011b\25\44"+
    "\2\0\1\44\1\0\4\44\1\u011b\1\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\15\44"+
    "\1\u011c\14\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\u011d\25\44\2\0\1\44\1\0\4\44\1\u011d\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\23\44\1\u011e\6\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\22\44\1\u011f\7\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\10\44\1\u0120\21\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\6\44\1\u0121\23\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\u0122\25\44\2\0\1\44\1\0\4\44"+
    "\1\u0122\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\u0123\25\44\2\0\1\44"+
    "\1\0\4\44\1\u0123\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\23\44\1\u0124\6\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\22\44\1\u0125\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\13\44\1\u0126\16\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\1\u0127\31\44\2\0"+
    "\1\44\1\0\1\u0127\5\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\13\44\1\u0128\16\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\23\44\1\u0129\6\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\22\44\1\u012a\7\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\17\44\1\u012b\12\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\2\44\1\u012c\27\44"+
    "\2\0\1\44\1\0\2\44\1\u012c\3\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\1\u012d"+
    "\31\44\2\0\1\44\1\0\1\u012d\5\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\u012e\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\u012f\25\44\2\0\1\44\1\0\4\44\1\u012f\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\22\44\1\u0130\7\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\15\44\1\u0131\14\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\u0132\25\44\2\0\1\44\1\0\4\44"+
    "\1\u0132\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\23\44\1\u0133\6\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\2\44\1\u0134\27\44\2\0\1\44"+
    "\1\0\2\44\1\u0134\3\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\15\44\1\u0135\14\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\3\44\1\u0136\26\44"+
    "\2\0\1\44\1\0\3\44\1\u0136\2\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\4\44"+
    "\1\u0137\25\44\2\0\1\44\1\0\4\44\1\u0137\1\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\13\44\1\u0138\16\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\13\44\1\u0139\16\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\10\44\1\u013a\21\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\u013b\25\44\2\0\1\44\1\0\4\44"+
    "\1\u013b\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\2\44\1\u013c\27\44\2\0\1\44"+
    "\1\0\2\44\1\u013c\3\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\32\44\2\0\1\u013d"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\23\44\1\u013e\6\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\2\44\1\u013f\27\44\2\0\1\44"+
    "\1\0\2\44\1\u013f\3\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\25\44\1\u0140\4\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\12\44\1\u0141\17\44"+
    "\2\0\1\44\1\0\6\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\3\44\1\u0142\17\44"+
    "\1\u0143\6\44\2\0\1\44\1\0\3\44\1\u0142\2\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\23\44\1\u0144\6\44\2\0\1\44\1\0\6\44"+
    "\2\0\3\44\6\0\1\44\10\0\2\44\1\0\2\44"+
    "\6\0\4\44\1\u0145\25\44\2\0\1\44\1\0\4\44"+
    "\1\u0145\1\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\1\u0146\31\44\2\0\1\44\1\0"+
    "\1\u0146\5\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\10\44\1\u0147\21\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\23\44\1\u0148\6\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\14\44\1\u0149\15\44\2\0\1\44"+
    "\1\0\6\44\2\0\3\44\6\0\1\44\10\0\2\44"+
    "\1\0\2\44\6\0\4\44\1\u014a\25\44\2\0\1\44"+
    "\1\0\4\44\1\u014a\1\44\2\0\3\44\6\0\1\44"+
    "\10\0\2\44\1\0\2\44\6\0\4\44\1\u014b\25\44"+
    "\2\0\1\44\1\0\4\44\1\u014b\1\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\22\44"+
    "\1\u014c\7\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\23\44"+
    "\1\u014d\6\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\1\u014e"+
    "\31\44\2\0\1\44\1\0\1\u014e\5\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\14\44"+
    "\1\u014f\15\44\2\0\1\44\1\0\6\44\2\0\3\44"+
    "\6\0\1\44\10\0\2\44\1\0\2\44\6\0\17\44"+
    "\1\u0150\12\44\2\0\1\44\1\0\6\44\2\0\2\44";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16750];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\1\1\5\11\5\1\1\11"+
    "\37\1\2\11\6\1\2\0\6\11\62\1\1\11\1\1"+
    "\1\11\2\1\1\0\73\1\1\0\1\11\227\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /* user code: */
  public _ESQLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ESQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 109: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 3:
            { return UNTERMINATED_DOUBLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 111: break;
          case 4:
            { return LINE_COMMENT;
            }
          // fall through
          case 112: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 113: break;
          case 6:
            { return AMP;
            }
          // fall through
          case 114: break;
          case 7:
            { return UNTERMINATED_SINGLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 115: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 116: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 117: break;
          case 10:
            { return STAR;
            }
          // fall through
          case 118: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 119: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 120: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 121: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 122: break;
          case 15:
            { return DIV;
            }
          // fall through
          case 123: break;
          case 16:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 124: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 125: break;
          case 18:
            { return LT;
            }
          // fall through
          case 126: break;
          case 19:
            { return EQ;
            }
          // fall through
          case 127: break;
          case 20:
            { return GT;
            }
          // fall through
          case 128: break;
          case 21:
            { return NUMBERED_PARAMETER;
            }
          // fall through
          case 129: break;
          case 22:
            { return IDENTIFIER;
            }
          // fall through
          case 130: break;
          case 23:
            { return UNTERMINATED_BRACKET_LITERAL;
            }
          // fall through
          case 131: break;
          case 24:
            { return UNTERMINATED_BACKTICK_LITERAL;
            }
          // fall through
          case 132: break;
          case 25:
            { return BAR;
            }
          // fall through
          case 133: break;
          case 26:
            { return TILDE;
            }
          // fall through
          case 134: break;
          case 27:
            { return NOT_EQ;
            }
          // fall through
          case 135: break;
          case 28:
            { return DOUBLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 136: break;
          case 29:
            { return NAMED_PARAMETER;
            }
          // fall through
          case 137: break;
          case 30:
            { return SINGLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 138: break;
          case 31:
            { return COMMENT;
            }
          // fall through
          case 139: break;
          case 32:
            { return SHL;
            }
          // fall through
          case 140: break;
          case 33:
            { return LTE;
            }
          // fall through
          case 141: break;
          case 34:
            { return UNEQ;
            }
          // fall through
          case 142: break;
          case 35:
            { return EQEQ;
            }
          // fall through
          case 143: break;
          case 36:
            { return GTE;
            }
          // fall through
          case 144: break;
          case 37:
            { return SHR;
            }
          // fall through
          case 145: break;
          case 38:
            { return AS;
            }
          // fall through
          case 146: break;
          case 39:
            { return BY;
            }
          // fall through
          case 147: break;
          case 40:
            { return IN;
            }
          // fall through
          case 148: break;
          case 41:
            { return IS;
            }
          // fall through
          case 149: break;
          case 42:
            { return ON;
            }
          // fall through
          case 150: break;
          case 43:
            { return OR;
            }
          // fall through
          case 151: break;
          case 44:
            { return BRACKET_LITERAL;
            }
          // fall through
          case 152: break;
          case 45:
            { return BACKTICK_LITERAL;
            }
          // fall through
          case 153: break;
          case 46:
            { return CONCAT;
            }
          // fall through
          case 154: break;
          case 47:
            { return ALL;
            }
          // fall through
          case 155: break;
          case 48:
            { return AND;
            }
          // fall through
          case 156: break;
          case 49:
            { return ASC;
            }
          // fall through
          case 157: break;
          case 50:
            { return END;
            }
          // fall through
          case 158: break;
          case 51:
            { return NOT;
            }
          // fall through
          case 159: break;
          case 52:
            { return CASE;
            }
          // fall through
          case 160: break;
          case 53:
            { return CAST;
            }
          // fall through
          case 161: break;
          case 54:
            { return DESC;
            }
          // fall through
          case 162: break;
          case 55:
            { return ELSE;
            }
          // fall through
          case 163: break;
          case 56:
            { return FAIL;
            }
          // fall through
          case 164: break;
          case 57:
            { return FROM;
            }
          // fall through
          case 165: break;
          case 58:
            { return FULL;
            }
          // fall through
          case 166: break;
          case 59:
            { return GLOB;
            }
          // fall through
          case 167: break;
          case 60:
            { return JOIN;
            }
          // fall through
          case 168: break;
          case 61:
            { return LEFT;
            }
          // fall through
          case 169: break;
          case 62:
            { return LIKE;
            }
          // fall through
          case 170: break;
          case 63:
            { return NULL;
            }
          // fall through
          case 171: break;
          case 64:
            { return PLAN;
            }
          // fall through
          case 172: break;
          case 65:
            { return THEN;
            }
          // fall through
          case 173: break;
          case 66:
            { return WHEN;
            }
          // fall through
          case 174: break;
          case 67:
            { return WITH;
            }
          // fall through
          case 175: break;
          case 68:
            { return ABORT;
            }
          // fall through
          case 176: break;
          case 69:
            { return CROSS;
            }
          // fall through
          case 177: break;
          case 70:
            { return GROUP;
            }
          // fall through
          case 178: break;
          case 71:
            { return INNER;
            }
          // fall through
          case 179: break;
          case 72:
            { return LIMIT;
            }
          // fall through
          case 180: break;
          case 73:
            { return MATCH;
            }
          // fall through
          case 181: break;
          case 74:
            { return ORDER;
            }
          // fall through
          case 182: break;
          case 75:
            { return OUTER;
            }
          // fall through
          case 183: break;
          case 76:
            { return QUERY;
            }
          // fall through
          case 184: break;
          case 77:
            { return RAISE;
            }
          // fall through
          case 185: break;
          case 78:
            { return RIGHT;
            }
          // fall through
          case 186: break;
          case 79:
            { return UNION;
            }
          // fall through
          case 187: break;
          case 80:
            { return USING;
            }
          // fall through
          case 188: break;
          case 81:
            { return WHERE;
            }
          // fall through
          case 189: break;
          case 82:
            { return DELETE;
            }
          // fall through
          case 190: break;
          case 83:
            { return ESCAPE;
            }
          // fall through
          case 191: break;
          case 84:
            { return EXCEPT;
            }
          // fall through
          case 192: break;
          case 85:
            { return EXISTS;
            }
          // fall through
          case 193: break;
          case 86:
            { return HAVING;
            }
          // fall through
          case 194: break;
          case 87:
            { return IGNORE;
            }
          // fall through
          case 195: break;
          case 88:
            { return INSERT;
            }
          // fall through
          case 196: break;
          case 89:
            { return ISNULL;
            }
          // fall through
          case 197: break;
          case 90:
            { return OFFSET;
            }
          // fall through
          case 198: break;
          case 91:
            { return REGEXP;
            }
          // fall through
          case 199: break;
          case 92:
            { return SELECT;
            }
          // fall through
          case 200: break;
          case 93:
            { return UPDATE;
            }
          // fall through
          case 201: break;
          case 94:
            { return VALUES;
            }
          // fall through
          case 202: break;
          case 95:
            { return BETWEEN;
            }
          // fall through
          case 203: break;
          case 96:
            { return COLLATE;
            }
          // fall through
          case 204: break;
          case 97:
            { return EXPLAIN;
            }
          // fall through
          case 205: break;
          case 98:
            { return INDEXED;
            }
          // fall through
          case 206: break;
          case 99:
            { return NATURAL;
            }
          // fall through
          case 207: break;
          case 100:
            { return NOTNULL;
            }
          // fall through
          case 208: break;
          case 101:
            { return REPLACE;
            }
          // fall through
          case 209: break;
          case 102:
            { return DISTINCT;
            }
          // fall through
          case 210: break;
          case 103:
            { return ROLLBACK;
            }
          // fall through
          case 211: break;
          case 104:
            { return INTERSECT;
            }
          // fall through
          case 212: break;
          case 105:
            { return RECURSIVE;
            }
          // fall through
          case 213: break;
          case 106:
            { return CURRENT_DATE;
            }
          // fall through
          case 214: break;
          case 107:
            { return CURRENT_TIME;
            }
          // fall through
          case 215: break;
          case 108:
            { return CURRENT_TIMESTAMP;
            }
          // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
